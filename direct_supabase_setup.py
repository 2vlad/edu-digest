#!/usr/bin/env python3
"""
–ü—Ä—è–º–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª—ã –Ω–∞–ø—Ä—è–º—É—é
"""

import os
import sys

# EdTech –∫–∞–Ω–∞–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
EDTECH_CHANNELS = [
    {"username": "@edtexno", "display_name": "EdTechno", "priority": 10},
    {"username": "@vc_edtech", "display_name": "VC EdTech", "priority": 9},
    {"username": "@rusedweek", "display_name": "Russian EdWeek", "priority": 8},
    {"username": "@edtech_hub", "display_name": "EdTech Hub", "priority": 8},
    {"username": "@prosv_media", "display_name": "–ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏–µ –ú–µ–¥–∏–∞", "priority": 7},
    {"username": "@digitaleducation", "display_name": "–¶–∏—Ñ—Ä–æ–≤–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "priority": 7},
    {"username": "@skillfactory_news", "display_name": "SkillFactory News", "priority": 6},
    {"username": "@netology_ru", "display_name": "–ù–µ—Ç–æ–ª–æ–≥–∏—è", "priority": 6},
    {"username": "@geekbrains_ru", "display_name": "GeekBrains", "priority": 6},
    {"username": "@skyengschool", "display_name": "Skyeng", "priority": 5}
]

def get_database_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    try:
        import psycopg2
        from psycopg2.extras import RealDictCursor
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        database_url = os.getenv('DATABASE_URL')
        if not database_url:
            print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return None
        
        print(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL...")
        print(f"üîó URL: {database_url[:50]}...")
        
        conn = psycopg2.connect(
            database_url,
            cursor_factory=RealDictCursor,
            connect_timeout=15
        )
        conn.autocommit = True
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()['version']
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {version[:50]}...")
        
        return conn
        
    except ImportError:
        print("‚ùå psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return None

def create_tables(conn):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
    try:
        cursor = conn.cursor()
        
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS channels (
                id SERIAL PRIMARY KEY,
                username TEXT UNIQUE NOT NULL,
                display_name TEXT,
                priority INTEGER DEFAULT 0 CHECK (priority >= 0 AND priority <= 10),
                is_active BOOLEAN DEFAULT true,
                last_message_id BIGINT DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ channels —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS processed_messages (
                id SERIAL PRIMARY KEY,
                channel_id INTEGER NOT NULL REFERENCES channels(id) ON DELETE CASCADE,
                message_id BIGINT NOT NULL,
                message_text TEXT,
                summary TEXT,
                processed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                published BOOLEAN DEFAULT false,
                UNIQUE(channel_id, message_id)
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ processed_messages —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS settings (
                id SERIAL PRIMARY KEY,
                key TEXT UNIQUE NOT NULL,
                value TEXT NOT NULL,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ settings —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS run_logs (
                id SERIAL PRIMARY KEY,
                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed_at TIMESTAMP,
                status TEXT CHECK (status IN ('started', 'completed', 'failed')),
                channels_processed INTEGER DEFAULT 0,
                messages_collected INTEGER DEFAULT 0,
                news_published INTEGER DEFAULT 0,
                error_message TEXT
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ run_logs —Å–æ–∑–¥–∞–Ω–∞")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_settings = [
            ('max_news_count', '10', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ'),
            ('target_channel', '@vestnik_edtech', '–¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'),
            ('digest_times', '12:00,18:00', '–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤'),
            ('summary_max_length', '150', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏–º–≤–æ–ª–∞—Ö'),
            ('hours_lookback', '12', '–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏'),
        ]
        
        for key, value, description in default_settings:
            cursor.execute("""
                INSERT INTO settings (key, value, description) 
                VALUES (%s, %s, %s)
                ON CONFLICT (key) DO NOTHING
            """, (key, value, description))
        
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def add_channels(conn):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ EdTech –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        cursor = conn.cursor()
        
        print("üì∫ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ EdTech –∫–∞–Ω–∞–ª–æ–≤...")
        
        added_count = 0
        for channel in EDTECH_CHANNELS:
            try:
                cursor.execute("""
                    INSERT INTO channels (username, display_name, priority)
                    VALUES (%s, %s, %s)
                    ON CONFLICT (username) DO UPDATE SET
                        display_name = EXCLUDED.display_name,
                        priority = EXCLUDED.priority,
                        updated_at = CURRENT_TIMESTAMP
                    RETURNING id
                """, (channel["username"], channel["display_name"], channel["priority"]))
                
                result = cursor.fetchone()
                if result:
                    added_count += 1
                    print(f"‚úÖ {channel['display_name']} - –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω")
                
            except Exception as channel_error:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –∫–∞–Ω–∞–ª–æ–º {channel['username']}: {channel_error}")
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {added_count}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return False

def verify_setup(conn):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        cursor = conn.cursor()
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü
        cursor.execute("""
            SELECT table_name FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_type = 'BASE TABLE'
        """)
        tables = [row['table_name'] for row in cursor.fetchall()]
        print(f"üìã –¢–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        cursor.execute("SELECT COUNT(*) as count FROM channels")
        channels_count = cursor.fetchone()['count']
        print(f"üì∫ –ö–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ: {channels_count}")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        cursor.execute("SELECT COUNT(*) as count FROM settings")
        settings_count = cursor.fetchone()['count']
        print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±–∞–∑–µ: {settings_count}")
        
        if len(tables) >= 4 and channels_count > 0 and settings_count > 0:
            print("üéâ Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–ø–æ–ª–Ω–∞—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

def main():
    print("üêò –ü—Ä—è–º–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase –¥–ª—è EdTech Bot")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['DATABASE_URL', 'SUPABASE_URL', 'SUPABASE_ANON_KEY']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤ Railway Dashboard")
        return 1
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    conn = get_database_connection()
    if not conn:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return 1
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        if not create_tables(conn):
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü")
            return 1
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
        if not add_channels(conn):
            print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤")
            return 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        if not verify_setup(conn):
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            return 1
        
        print("\nüéâ –ù–ê–°–¢–†–û–ô–ö–ê SUPABASE –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("‚úÖ EdTech –∫–∞–Ω–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        print("\nüöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1
        
    finally:
        if conn:
            conn.close()

if __name__ == "__main__":
    sys.exit(main())