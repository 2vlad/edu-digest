#!/usr/bin/env python3
"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤ EdTech News Digest
–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
"""
import os
import sys
import asyncio
import logging
import schedule
import time
from datetime import datetime, timezone

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/scheduler.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def get_schedule_times():
    """–ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        from src.database import SettingsDB
        digest_times = SettingsDB.get_setting('digest_times', '12:00,18:00')
        times = [t.strip() for t in digest_times.split(',') if t.strip()]
        logger.info(f"üìÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {times}")
        return times
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        # Fallback –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return ['12:00', '18:00']

def run_news_collection():
    """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–±–æ—Ä–∞
        from main import run_collect
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            start_time = datetime.now()
            result_code = loop.run_until_complete(run_collect())
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            
            if result_code == 0:
                logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.2f}—Å")
            else:
                logger.error(f"‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {result_code})")
                
        finally:
            loop.close()
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞: {e}")
        import traceback
        logger.error(f"üìã Traceback: {traceback.format_exc()}")

def setup_schedule():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    logger.info("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤...")
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è
    schedule.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    times = get_schedule_times()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    for time_str in times:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
            datetime.strptime(time_str, '%H:%M')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
            schedule.every().day.at(time_str).do(run_news_collection)
            logger.info(f"üìÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω –∑–∞–ø—É—Å–∫ –≤ {time_str} –∫–∞–∂–¥—ã–π –¥–µ–Ω—å")
            
        except ValueError:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_str}. –û–∂–∏–¥–∞–µ—Ç—Å—è HH:MM")
    
    if not schedule.jobs:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è! –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        schedule.every().day.at("12:00").do(run_news_collection)
        schedule.every().day.at("18:00").do(run_news_collection)
        logger.info("üìÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –∑–∞–ø—É—Å–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 12:00 –∏ 18:00")
    
    logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(schedule.jobs)} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π")

def log_next_runs():
    """–õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–∞—Ö"""
    if schedule.jobs:
        logger.info("üìã –°–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏:")
        for job in schedule.jobs:
            next_run = job.next_run
            if next_run:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                formatted_time = next_run.strftime('%Y-%m-%d %H:%M:%S')
                logger.info(f"   ‚è∞ {formatted_time}")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ EdTech News Digest...")
    logger.info("=" * 60)
    logger.info(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {datetime.now().astimezone().tzinfo}")
    logger.info("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    setup_schedule()
    log_next_runs()
    
    logger.info("üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π...")
    
    try:
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            schedule.run_pending()
            
            # –°–ø–∏–º 60 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            time.sleep(60)
            
            # –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫)
            current_time = datetime.now()
            if current_time.minute == 0 and current_time.hour % 6 == 0:
                logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
                setup_schedule()
                log_next_runs()
                
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        import traceback
        logger.error(f"üìã Traceback: {traceback.format_exc()}")
        raise

if __name__ == "__main__":
    main()