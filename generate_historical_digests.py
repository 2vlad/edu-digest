#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
–°–æ–∑–¥–∞–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç—ã –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
"""

import asyncio
import logging
import sys
from datetime import datetime, timezone, timedelta, time, date
from typing import List, Dict, Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
sys.path.append('/Users/tovlad01/Dev/edu-digest')
from src.news_collector import NewsCollector
from src.telegram_reader import get_telegram_reader
from src.claude_summarizer import get_claude_summarizer
from src.telegram_bot import get_telegram_bot
from src.database import ChannelsDB

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/historical_digests.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class HistoricalDigestGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.telegram_reader = None
        self.claude_summarizer = None
        self.telegram_bot = None
        self.channels_db = ChannelsDB()
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤...")
        
        self.telegram_reader = await get_telegram_reader()
        if not self.telegram_reader:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram reader")
            
        self.claude_summarizer = await get_claude_summarizer()
        self.telegram_bot = await get_telegram_bot()
        
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
    async def get_historical_messages(self, target_date: date, 
                                    start_hour: int, end_hour: int) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫
        
        Args:
            target_date: –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞
            start_hour: –ù–∞—á–∞–ª—å–Ω—ã–π —á–∞—Å (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
            end_hour: –ö–æ–Ω–µ—á–Ω—ã–π —á–∞—Å (–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
        """
        logger.info(f"üìÖ –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {target_date} —Å {start_hour}:00 –¥–æ {end_hour}:00")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        channels = self.channels_db.get_active_channels()
        if not channels:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
            return []
            
        logger.info(f"üì° –ù–∞–π–¥–µ–Ω–æ {len(channels)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
        
        all_messages = []
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤ UTC (—É—á–∏—Ç—ã–≤–∞—è –ú–°–ö = UTC+3)
        msk_start = datetime.combine(target_date, time(start_hour, 0))
        msk_end = datetime.combine(target_date, time(end_hour, 0))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
        utc_start = msk_start - timedelta(hours=3)
        utc_end = msk_end - timedelta(hours=3)
        
        logger.info(f"üïê –í—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã UTC: {utc_start} - {utc_end}")
        
        for channel in channels:
            username = channel.get('username', '')
            if not username:
                continue
                
            try:
                logger.info(f"üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª: {username}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
                messages = await self.telegram_reader.get_channel_messages_by_date_range(
                    username,
                    start_date=utc_start,
                    end_date=utc_end,
                    limit=200  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                )
                
                logger.info(f"‚úÖ {username}: –Ω–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
                all_messages.extend(messages)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ {username}: {e}")
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        all_messages.sort(key=lambda x: x['date'])
        
        logger.info(f"üìä –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        return all_messages
    
    async def create_historical_digest(self, target_date: date, 
                                     digest_type: str, 
                                     start_hour: int, end_hour: int,
                                     publish: bool = True) -> Dict:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        
        Args:
            target_date: –î–∞—Ç–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            digest_type: –¢–∏–ø –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–£—Ç—Ä–µ–Ω–Ω–∏–π/–í–µ—á–µ—Ä–Ω–∏–π)
            start_hour: –ù–∞—á–∞–ª—å–Ω—ã–π —á–∞—Å —Å–±–æ—Ä–∞
            end_hour: –ö–æ–Ω–µ—á–Ω—ã–π —á–∞—Å —Å–±–æ—Ä–∞
            publish: –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ª–∏ –¥–∞–π–¥–∂–µ—Å—Ç
        """
        logger.info(f"üì∞ –°–æ–∑–¥–∞–Ω–∏–µ {digest_type.lower()} –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∑–∞ {target_date}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = await self.get_historical_messages(target_date, start_hour, end_hour)
        
        if not messages:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ {digest_type} –∑–∞ {target_date}")
            return {"success": False, "reason": "no_messages"}
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π (–º–∞–∫—Å–∏–º—É–º 10)
        if len(messages) > 10:
            logger.info(f"üìù –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(messages)} ‚Üí 10")
            messages = messages[:10]
        
        # –°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.info(f"ü§ñ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
        summarized_messages = await self.claude_summarizer.summarize_batch(messages)
        
        if not summarized_messages:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
            return {"success": False, "reason": "summarization_failed"}
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        digest_text = self.format_historical_digest(
            summarized_messages, target_date, digest_type
        )
        
        result = {
            "success": True,
            "date": target_date,
            "type": digest_type,
            "messages_count": len(summarized_messages),
            "digest_text": digest_text
        }
        
        # –ü—É–±–ª–∏–∫—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if publish:
            logger.info(f"üì° –ü—É–±–ª–∏–∫—É–µ–º {digest_type.lower()} –¥–∞–π–¥–∂–µ—Å—Ç...")
            success = await self.telegram_bot.send_digest(digest_text)
            result["published"] = success
            
            if success:
                logger.info(f"‚úÖ {digest_type} –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ {target_date} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
        
        return result
    
    def format_historical_digest(self, messages: List[Dict], 
                                target_date: date, digest_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ-—Ä—É—Å—Å–∫–∏
        months_ru = {
            1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
            5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 
            9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
        }
        
        date_str = f"{target_date.day} {months_ru[target_date.month]}"
        digest_title = f"{digest_type} –¥–∞–π–¥–∂–µ—Å—Ç {date_str}"
        
        digest_lines = []
        digest_lines.append(digest_title)
        digest_lines.append("")  # –û—Ç–±–∏–≤–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for i, msg in enumerate(messages):
            summary = msg.get('summary', msg['text'][:120] + '...')
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            channel_name = msg.get('channel', '').replace('@', '')
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö)
            channel_link = f"https://t.me/{channel_name}" if channel_name else ""
            
            if channel_link:
                news_line = f"‚Ä¢ {summary} [{channel_name}]({channel_link})"
            else:
                news_line = f"‚Ä¢ {summary}"
            
            digest_lines.append(news_line)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω—Ü–µ
        digest_lines.append("")
        digest_lines.append("‚ö°")
        
        return "\n".join(digest_lines)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    
    # –î–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
    digest_schedule = [
        # 22 –∏—é–ª—è
        (date(2025, 7, 22), "–£—Ç—Ä–µ–Ω–Ω–∏–π", 6, 12),   # 06:00-12:00 ‚Üí –£—Ç—Ä–µ–Ω–Ω–∏–π
        (date(2025, 7, 22), "–í–µ—á–µ—Ä–Ω–∏–π", 12, 23),  # 12:00-23:00 ‚Üí –í–µ—á–µ—Ä–Ω–∏–π
        
        # 23 –∏—é–ª—è  
        (date(2025, 7, 23), "–£—Ç—Ä–µ–Ω–Ω–∏–π", 6, 12),   # 06:00-12:00 ‚Üí –£—Ç—Ä–µ–Ω–Ω–∏–π
        (date(2025, 7, 23), "–í–µ—á–µ—Ä–Ω–∏–π", 12, 23),  # 12:00-23:00 ‚Üí –í–µ—á–µ—Ä–Ω–∏–π
        
        # 24 –∏—é–ª—è
        (date(2025, 7, 24), "–£—Ç—Ä–µ–Ω–Ω–∏–π", 6, 12),   # 06:00-12:00 ‚Üí –£—Ç—Ä–µ–Ω–Ω–∏–π  
        (date(2025, 7, 24), "–í–µ—á–µ—Ä–Ω–∏–π", 12, 23),  # 12:00-23:00 ‚Üí –í–µ—á–µ—Ä–Ω–∏–π
    ]
    
    generator = HistoricalDigestGenerator()
    
    try:
        await generator.initialize()
        
        logger.info("üéØ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é 6 –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤...")
        logger.info("=" * 60)
        
        results = []
        
        for i, (target_date, digest_type, start_hour, end_hour) in enumerate(digest_schedule, 1):
            logger.info(f"üìÖ –î–∞–π–¥–∂–µ—Å—Ç {i}/6: {digest_type} {target_date}")
            
            result = await generator.create_historical_digest(
                target_date=target_date,
                digest_type=digest_type, 
                start_hour=start_hour,
                end_hour=end_hour,
                publish=True  # –ü—É–±–ª–∏–∫—É–µ–º —Å—Ä–∞–∑—É
            )
            
            results.append(result)
            
            if result["success"]:
                logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç {i} —Å–æ–∑–¥–∞–Ω: {result['messages_count']} –Ω–æ–≤–æ—Å—Ç–µ–π")
            else:
                logger.error(f"‚ùå –î–∞–π–¥–∂–µ—Å—Ç {i} –Ω–µ —Å–æ–∑–¥–∞–Ω: {result['reason']}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
            if i < len(digest_schedule):
                logger.info("‚è≥ –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–π–¥–∂–µ—Å—Ç–æ–º...")
                await asyncio.sleep(10)
        
        # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("=" * 60)
        logger.info("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        
        successful = sum(1 for r in results if r["success"])
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {successful}/{len(results)} –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤")
        
        for i, result in enumerate(results, 1):
            if result["success"]:
                logger.info(f"  {i}. {result['type']} {result['date']}: {result['messages_count']} –Ω–æ–≤–æ—Å—Ç–µ–π")
            else:
                logger.info(f"  {i}. –û—à–∏–±–∫–∞: {result['reason']}")
        
        logger.info("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(f"üìã Traceback: {traceback.format_exc()}")
        
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")