#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Task 6: Flask –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
–≠—Ç–∞–ø 6 PRD - –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏
"""
import os
import sys
import time
import requests
import threading
from multiprocessing import Process

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def start_admin_panel():
    """–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    try:
        from src.admin_panel import app
        app.run(host='127.0.0.1', port=5001, debug=False, use_reloader=False)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")

def test_admin_panel():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ Task 6"""
    print("üåê Task 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Flask –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    print("="*50)
    
    base_url = "http://127.0.0.1:5001"
    success_count = 0
    total_tests = 6
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ —Ñ–æ–Ω–µ
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ —Ñ–æ–Ω–µ...")
    admin_process = Process(target=start_admin_panel)
    admin_process.start()
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    time.sleep(3)
    
    try:
        # 6.1. –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞—à–±–æ—Ä–¥–∞
        print("\n1Ô∏è‚É£ –ü–æ–¥—Ç–µ—Å—Ç 6.1: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—à–±–æ—Ä–¥–∞")
        try:
            response = requests.get(f"{base_url}/", timeout=5)
            if response.status_code == 200 and "–î–∞—à–±–æ—Ä–¥" in response.text:
                print("‚úÖ –î–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"   –†–∞–∑–º–µ—Ä: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                success_count += 1
            else:
                print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞—à–±–æ—Ä–¥–æ–º: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞—à–±–æ—Ä–¥—É: {e}")
        
        # 6.2. –¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
        print("\n2Ô∏è‚É£ –ü–æ–¥—Ç–µ—Å—Ç 6.2: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏")
        try:
            response = requests.get(f"{base_url}/channels", timeout=5)
            if response.status_code == 200 and "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏" in response.text:
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–Ω–∞–ª–æ–≤
                if "vc_edtech" in response.text:
                    print("   üì∫ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è")
                
                if "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª" in response.text:
                    print("   ‚ûï –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                success_count += 1
            else:
                print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –∫–∞–Ω–∞–ª–æ–≤: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º: {e}")
        
        # 6.3. –¢–µ—Å—Ç —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        print("\n3Ô∏è‚É£ –ü–æ–¥—Ç–µ—Å—Ç 6.3: –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
        try:
            response = requests.get(f"{base_url}/channels/add", timeout=5)
            if response.status_code == 200:
                print("‚úÖ –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
                form_elements = ["username", "display_name", "priority"]
                found_elements = [elem for elem in form_elements if elem in response.text]
                
                print(f"   üìù –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã: {len(found_elements)}/{len(form_elements)}")
                
                if len(found_elements) >= 3:
                    success_count += 1
            else:
                print(f"‚ùå –§–æ—Ä–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–æ—Ä–º–µ: {e}")
        
        # 6.4. –¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
        print("\n4Ô∏è‚É£ –ü–æ–¥—Ç–µ—Å—Ç 6.4: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã")
        try:
            response = requests.get(f"{base_url}/settings", timeout=5)
            if response.status_code == 200 and "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã" in response.text:
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                key_settings = ["max_news_count", "target_channel", "hours_lookback"]
                found_settings = [setting for setting in key_settings if setting in response.text]
                
                print(f"   ‚öôÔ∏è  –ù–∞–π–¥–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {len(found_settings)}/{len(key_settings)}")
                
                if len(found_settings) >= 2:
                    success_count += 1
            else:
                print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º: {e}")
        
        # 6.5. –¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–æ–≤
        print("\n5Ô∏è‚É£ –ü–æ–¥—Ç–µ—Å—Ç 6.5: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–æ–≤ –∑–∞–ø—É—Å–∫–æ–≤")
        try:
            response = requests.get(f"{base_url}/logs", timeout=5)
            if response.status_code == 200 and "–õ–æ–≥–∏ –∑–∞–ø—É—Å–∫–æ–≤" in response.text:
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–æ–≤
                if "–û–±–Ω–æ–≤–∏—Ç—å" in response.text:
                    print("   üîÑ –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                if any(word in response.text.lower() for word in ["—Å—Ç–∞—Ç—É—Å", "–≤—Ä–µ–º—è", "–∫–∞–Ω–∞–ª—ã"]):
                    print("   üìä –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")
                    
                success_count += 1
            else:
                print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ª–æ–≥–∞–º–∏: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º: {e}")
        
        # 6.6. –¢–µ—Å—Ç API endpoints
        print("\n6Ô∏è‚É£ –ü–æ–¥—Ç–µ—Å—Ç 6.6: API endpoints –∏ health check")
        try:
            # Health check
            health_response = requests.get(f"{base_url}/health", timeout=5)
            if health_response.status_code == 200:
                health_data = health_response.json()
                if health_data.get('status') == 'ok':
                    print("‚úÖ Health check —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    print(f"   üóÑÔ∏è  Database: {health_data.get('database')}")
                    print(f"   üìä Channels: {health_data.get('channels_count')}")
                    
                    # API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    try:
                        stats_response = requests.get(f"{base_url}/api/stats", timeout=5)
                        if stats_response.status_code == 200:
                            stats_data = stats_response.json()
                            print("   üìà API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                            print(f"      –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats_data.get('active_channels', 0)}")
                            
                    except Exception:
                        print("   ‚ö†Ô∏è  API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                    
                    success_count += 1
                else:
                    print("‚ùå Health check –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É")
            else:
                print(f"‚ùå Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: —Å—Ç–∞—Ç—É—Å {health_response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API —Ç–µ—Å—Ç–æ–≤: {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç Task 6:")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {success_count}/{total_tests}")
        
        if success_count >= 5:  # 5+ –∏–∑ 6 —Ç–µ—Å—Ç–æ–≤
            print("\nüéâ Task 6 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("üìã Flask –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≥–æ—Ç–æ–≤–∞:")
            print("   ‚úÖ –î–∞—à–±–æ—Ä–¥ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")
            print("   ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ (CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏)")
            print("   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
            print("   ‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π")
            print("   ‚úÖ API endpoints –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
            print("   ‚úÖ Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            
            print(f"\nüåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞: {base_url}")
            print("üí° –í—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ PRD —ç—Ç–∞–ø–∞ 6 –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            
            return True
        else:
            print("\n‚ö†Ô∏è  Task 6 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ")
            print("üîß –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
            return False
            
    finally:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        print("\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
        admin_process.terminate()
        admin_process.join(timeout=2)
        if admin_process.is_alive():
            admin_process.kill()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("PRD –≠—Ç–∞–ø 6 - –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏:")
    print("‚úÖ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É")
    print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    print("‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤")
    print("‚úÖ –ë–∞–∑–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å)")
    print()
    
    success = test_admin_panel()
    
    if success:
        print(f"\nüöÄ Task 6 –≥–æ—Ç–æ–≤–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Task 7")
        print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞: python main.py admin")
    else:
        print(f"\nüîß –ù—É–∂–Ω—ã –¥–æ—Ä–∞–±–æ—Ç–∫–∏ Task 6")

if __name__ == "__main__":
    main()