#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import sys

def test_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase PostgreSQL"""
    print("üîß –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    database_url = os.getenv('DATABASE_URL')
    supabase_url = os.getenv('SUPABASE_URL')
    supabase_key = os.getenv('SUPABASE_ANON_KEY')
    
    print(f"üîó DATABASE_URL: {'‚úÖ –ù–∞–π–¥–µ–Ω' if database_url else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f"üîó SUPABASE_URL: {'‚úÖ –ù–∞–π–¥–µ–Ω' if supabase_url else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f"üîë SUPABASE_ANON_KEY: {'‚úÖ –ù–∞–π–¥–µ–Ω' if supabase_key else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    
    if not database_url:
        print("\n‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ –≤ Railway –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DATABASE_URL —Å PostgreSQL —Å—Ç—Ä–æ–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return False
    
    if not supabase_url:
        print("\n‚ùå SUPABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ –≤ Railway –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é SUPABASE_URL —Å URL –≤–∞—à–µ–≥–æ Supabase –ø—Ä–æ–µ–∫—Ç–∞")
        return False
        
    if not supabase_key:
        print("\n‚ùå SUPABASE_ANON_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ –≤ Railway –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é SUPABASE_ANON_KEY —Å –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∫–ª—é—á–æ–º")
        return False
    
    try:
        import psycopg2
        from psycopg2.extras import RealDictCursor
        
        print(f"\nüîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL...")
        print(f"üåç URL: {database_url[:30]}...")
        
        conn = psycopg2.connect(
            database_url,
            cursor_factory=RealDictCursor,
            connect_timeout=10
        )
        
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        version_info = cursor.fetchone()['version']
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üêò PostgreSQL: {version_info[:80]}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
        cursor.execute("""
            SELECT table_name FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_type = 'BASE TABLE'
            ORDER BY table_name
        """)
        tables = [row['table_name'] for row in cursor.fetchall()]
        
        print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã ({len(tables)}): {', '.join(tables) if tables else '–ù–µ—Ç —Ç–∞–±–ª–∏—Ü'}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ channels, –ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        if 'channels' in tables:
            cursor.execute("SELECT COUNT(*) as count FROM channels")
            channels_count = cursor.fetchone()['count']
            print(f"üì∫ –ö–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ: {channels_count}")
        
        conn.close()
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–®–ï–õ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Supabase PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        return True
        
    except ImportError:
        print("\n‚ùå psycopg2 –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install psycopg2-binary")
        return False
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        
        if "Network is unreachable" in str(e):
            print("üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é - Railway –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DATABASE_URL –≤ Supabase Dashboard")
            
        elif "authentication failed" in str(e):
            print("üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å DATABASE_URL —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            
        elif "timeout" in str(e):
            print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            print("üí° –í–æ–∑–º–æ–∂–Ω–æ Supabase –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        else:
            print("üîß –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
        return False

if __name__ == "__main__":
    success = test_connection()
    sys.exit(0 if success else 1)