#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Claude API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (Task 4)
–≠—Ç–∞–ø 3 PRD - –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏
"""
import asyncio
import sys
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.claude_summarizer import ClaudeSummarizer

async def test_claude_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Claude API"""
    print("ü§ñ Task 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Claude API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("="*50)
    
    summarizer = ClaudeSummarizer()
    success_count = 0
    total_tests = 4
    
    # 4.1. –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Anthropic –∫–ª–∏–µ–Ω—Ç–∞
    print("1Ô∏è‚É£ –ü–æ–¥—Ç–µ—Å—Ç 4.1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Anthropic –∫–ª–∏–µ–Ω—Ç–∞")
    try:
        init_result = await summarizer.initialize()
        if init_result:
            print("‚úÖ Claude API –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print(f"   –ú–æ–¥–µ–ª—å: {summarizer.model}")
            print(f"   Max tokens: {summarizer.max_tokens}")
            success_count += 1
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Claude API")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ 4.1: {e}")
    
    # 4.2. –¢–µ—Å—Ç EdTech-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
    print("\n2Ô∏è‚É£ –ü–æ–¥—Ç–µ—Å—Ç 4.2: EdTech-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è")
    
    test_messages = [
        {
            "text": "–†–æ—Å—Å–∏–π—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Skillfactory –ø—Ä–∏–≤–ª–µ–∫–ª–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ $5 –º–ª–Ω –æ—Ç —Ñ–æ–Ω–¥–∞ Sistema Venture Capital. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ò–ò-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∫—É—Ä—Å–æ–≤ –ø–æ Data Science –∏ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é. –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å 50 000 –¥–æ 150 000 —á–µ–ª–æ–≤–µ–∫ –∫ –∫–æ–Ω—Ü—É 2024 –≥–æ–¥–∞.",
            "channel": "@edtech_news",
            "expected_keywords": ["Skillfactory", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "$5 –º–ª–Ω", "–ò–ò", "Data Science"]
        },
        {
            "text": "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ø—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è –†–§ –æ–±—ä—è–≤–∏–ª–æ –æ –∑–∞–ø—É—Å–∫–µ –ø–∏–ª–æ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é VR-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –≤ 100 —à–∫–æ–ª–∞—Ö –ú–æ—Å–∫–≤—ã –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞. –ü—Ä–æ–µ–∫—Ç —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π VR Education –∏ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –º–µ—Å—Ç–∞–º –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç.",
            "channel": "@education_gov",
            "expected_keywords": ["–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ", "VR", "100 —à–∫–æ–ª", "–∏—Å—Ç–æ—Ä–∏—è", "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è"]
        },
        {
            "text": "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ Coursera –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –Ω–æ–≤—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Course Builder, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫—É—Ä—Å–æ–≤ –∏ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ GPT-4 –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∫—É—Ä—Å–∞ —Å 40 –¥–æ 15 —á–∞—Å–æ–≤. –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å –º–∞—Ä—Ç–∞ 2024 –≥–æ–¥–∞.",
            "channel": "@coursera_updates", 
            "expected_keywords": ["Coursera", "–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "GPT-4", "40 –¥–æ 15 —á–∞—Å–æ–≤"]
        }
    ]
    
    try:
        print("   –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é 3 EdTech –Ω–æ–≤–æ—Å—Ç–µ–π...")
        
        successful_summaries = 0
        total_quality = 0
        
        for i, msg in enumerate(test_messages, 1):
            print(f"   –ù–æ–≤–æ—Å—Ç—å {i}: {msg['text'][:80]}...")
            
            result = await summarizer.summarize_message(msg['text'], msg['channel'])
            
            if result['success']:
                summary = result['summary']
                quality = result.get('quality_score', 0)
                
                print(f"   ‚úÖ –°–∞–º–º–∞—Ä–∏: {summary}")
                print(f"      –ö–∞—á–µ—Å—Ç–≤–æ: {quality}/10, –í—Ä–µ–º—è: {result.get('processing_time', 0):.2f}—Å")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                keywords_found = sum(1 for keyword in msg['expected_keywords'] 
                                   if keyword.lower() in summary.lower())
                
                if keywords_found > 0:
                    print(f"      üìç –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {keywords_found}/{len(msg['expected_keywords'])}")
                
                successful_summaries += 1
                total_quality += quality
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                if result.get('fallback_used'):
                    print(f"      üîÑ Fallback: {result['summary']}")
        
        if successful_summaries >= 2:  # –ú–∏–Ω–∏–º—É–º 2 –∏–∑ 3
            avg_quality = total_quality / successful_summaries if successful_summaries > 0 else 0
            print(f"‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç. –£—Å–ø–µ—à–Ω–æ: {successful_summaries}/3, –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_quality:.1f}/10")
            success_count += 1
        else:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ 4.2: {e}")
    
    # 4.3. –¢–µ—Å—Ç retry –º–µ—Ö–∞–Ω–∏–∑–º–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    print("\n3Ô∏è‚É£ –ü–æ–¥—Ç–µ—Å—Ç 4.3: Retry –º–µ—Ö–∞–Ω–∏–∑–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º API –∫–ª—é—á–æ–º
        broken_summarizer = ClaudeSummarizer()
        broken_summarizer.api_key = "invalid_key"
        
        result = await broken_summarizer.summarize_message(
            "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"
        )
        
        if not result['success'] and result.get('fallback_used'):
            print("‚úÖ Retry –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç, fallback –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            print(f"   Fallback summary: {result['summary']}")
            success_count += 1
        else:
            print("‚ö†Ô∏è  Retry –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ 4.3: {e}")
    
    # 4.4. –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞
    print("\n4Ô∏è‚É£ –ü–æ–¥—Ç–µ—Å—Ç 4.4: –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    try:
        # –¢–µ—Å—Ç –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        batch_messages = [
            {"text": "–ö—Ä–∞—Ç–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–æ EdTech —Å—Ç–∞—Ä—Ç–∞–ø", "channel": "@test1"},
            {"text": "–î–ª–∏–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ " * 20, "channel": "@test2"},
            {"text": "–ù–æ–≤–æ—Å—Ç—å –Ω–∞ —Å–º–µ—à–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ: educational technology advancement", "channel": "@test3"}
        ]
        
        start_time = time.time()
        batch_results = await summarizer.summarize_batch(batch_messages, max_concurrent=2)
        batch_time = time.time() - start_time
        
        if len(batch_results) >= 2:  # –ú–∏–Ω–∏–º—É–º 2 –∏–∑ 3
            avg_quality = sum(r.get('summary_quality', 0) for r in batch_results) / len(batch_results)
            success_rate = len(batch_results) / len(batch_messages) * 100
            
            print(f"‚úÖ –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   –£—Å–ø–µ—à–Ω–æ: {len(batch_results)}/3 ({success_rate:.0f}%)")
            print(f"   –í—Ä–µ–º—è: {batch_time:.2f}—Å, –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_quality:.1f}/10")
            
            success_count += 1
        else:
            print("‚ùå –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ 4.4: {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç Task 4:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {success_count}/{total_tests}")
    
    if success_count >= 3:  # 3+ –∏–∑ 4 —Ç–µ—Å—Ç–æ–≤
        print("\nüéâ Task 4 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üìã –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–¥–∑–∞–¥–∞—á–∏:")
        print("   4.1 ‚úÖ Anthropic client setup –∏ API key –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        print("   4.2 ‚úÖ EdTech-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")  
        print("   4.3 ‚úÖ Retry –º–µ—Ö–∞–Ω–∏–∑–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
        print("   4.4 ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞")
        
        print("\nüí° –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
        print("- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–∞–º–º–∞—Ä–∏: 150 —Å–∏–º–≤–æ–ª–æ–≤")
        print("- –ú–æ–¥–µ–ª—å: Claude-3-Sonnet")
        print("- Retry: –¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π")
        print("- Fallback: –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API")
        print("- Batch processing: –¥–æ 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        return True
    else:
        print("\n‚ö†Ô∏è  Task 4 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("PRD –≠—Ç–∞–ø 3 - –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏:")
    print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤ Claude API —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º")
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API (–ª–∏–º–∏—Ç—ã, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å)")
    print("‚úÖ Retry –º–µ—Ö–∞–Ω–∏–∑–º —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π")
    print("‚úÖ Fallback –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API")
    print()
    
    success = await test_claude_integration()
    
    if success:
        print(f"\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ Task 5! Claude API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞.")
        print("üí° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–¥—É–ª–µ–º —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
    else:
        print(f"\nüîß –ù—É–∂–Ω—ã –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ Task 5")

if __name__ == "__main__":
    asyncio.run(main())