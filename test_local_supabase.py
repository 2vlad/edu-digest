#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Supabase
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É
"""

import sys
import os
import asyncio
sys.path.append('src')

def main():
    print("üß™ –õ–û–ö–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° SUPABASE")
    print("=" * 60)
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("-" * 30)
    
    try:
        from src.config import (DATABASE_URL, SUPABASE_URL, SUPABASE_KEY, 
                               TELEGRAM_API_ID, TELEGRAM_API_HASH, ANTHROPIC_API_KEY)
        
        config_status = {
            "SUPABASE_URL": "‚úÖ OK" if SUPABASE_URL and "your-project-ref" not in SUPABASE_URL else "‚ùå Needs setup",
            "SUPABASE_ANON_KEY": "‚úÖ OK" if SUPABASE_KEY and "your-anon-public" not in SUPABASE_KEY else "‚ùå Needs setup", 
            "DATABASE_URL": "‚úÖ OK" if DATABASE_URL and "your-password" not in DATABASE_URL else "‚ùå Needs setup",
            "TELEGRAM_API_ID": "‚úÖ OK" if TELEGRAM_API_ID else "‚ùå Missing",
            "TELEGRAM_API_HASH": "‚úÖ OK" if TELEGRAM_API_HASH else "‚ùå Missing",
            "ANTHROPIC_API_KEY": "‚úÖ OK" if ANTHROPIC_API_KEY else "‚ùå Missing"
        }
        
        for key, status in config_status.items():
            print(f"   {key}: {status}")
        
        missing_config = [k for k, v in config_status.items() if "‚ùå" in v]
        if missing_config:
            print(f"\n‚ùå –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ï –ì–û–¢–û–í–ê!")
            print(f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å: {', '.join(missing_config)}")
            print("\nüìã –ß–¢–û –î–ï–õ–ê–¢–¨:")
            
            if any("SUPABASE" in key or "DATABASE" in key for key in missing_config):
                print("üîß –ù–ê–°–¢–†–û–ô–ö–ê SUPABASE:")
                print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://supabase.com")
                print("2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
                print("3. –í Settings -> API —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ:")
                print("   - Project URL (SUPABASE_URL)")
                print("   - anon public key (SUPABASE_ANON_KEY)")
                print("4. –í Settings -> Database —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ:")
                print("   - Connection string (DATABASE_URL)")
                print("5. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
                
            return False
        else:
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    # –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    print("\n2Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("-" * 30)
    
    try:
        from src.db_adapter import init_database, test_db, get_database_info, ChannelsDB
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ
        db_info = get_database_info()
        print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_info['type']}")
        
        if not db_info.get('production_ready', False):
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite fallback!")
            print("üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Supabase –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        init_database()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        if test_db():
            print("‚úÖ –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–æ—à–µ–ª")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã
        print("üì∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤...")
        channels = ChannelsDB.get_active_channels()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
        
        if len(channels) == 0:
            print("‚öôÔ∏è –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã...")
            test_channels = [
                ("@edtexno", "EdTechno", 10),
                ("@vc_edtech", "VC EdTech", 9),
                ("@rusedweek", "Russian EdWeek", 8),
            ]
            
            for username, display_name, priority in test_channels:
                try:
                    channel_id = ChannelsDB.add_channel(username, display_name, priority)
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: {display_name} (ID: {channel_id})")
                except Exception as e:
                    if "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in str(e) or "already exists" in str(e):
                        print(f"‚ÑπÔ∏è –ö–∞–Ω–∞–ª {display_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {display_name}: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        print(f"üìã –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False
    
    # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram API
    print("\n3Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM API")
    print("-" * 30)
    
    try:
        print("üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º Telegram reader
        from src.telegram_reader import TelegramChannelReader
        
        reader = TelegramChannelReader()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å (–Ω–æ –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
        print("‚úÖ Telegram –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print("üí° –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —Ç—Ä–µ–±—É–µ—Ç async –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram: {e}")
    
    # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º Claude API 
    print("\n4Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CLAUDE API")
    print("-" * 30)
    
    try:
        from src.claude_summarizer import ClaudeSummarizer
        
        summarizer = ClaudeSummarizer()
        print("‚úÖ Claude –º–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        test_result = summarizer.test_api_connection()
        if test_result.get('success', False):
            print("‚úÖ Claude API —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå Claude API —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {test_result.get('error', 'Unknown error')}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Claude: {e}")
    
    # –®–∞–≥ 5: –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    print("\n5Ô∏è‚É£ –ó–ê–ü–£–°–ö –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò")
    print("-" * 30)
    print("üåê –ó–∞–ø—É—Å–∫ Flask –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    print("üìç –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5002 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
    
    try:
        from src.admin_panel import app
        from src.config import FLASK_PORT
        
        app.run(host='127.0.0.1', port=FLASK_PORT, debug=True)
        
    except KeyboardInterrupt:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ –õ–û–ö–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û - –ò–°–ü–†–ê–í–¨–¢–ï –û–®–ò–ë–ö–ò")
        sys.exit(1)