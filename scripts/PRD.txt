телеграм канал «Вестник Эдтеха» с автопубликациями два раза в день

хочу сделать для нашей команды новостной канал-дайджест по теме эдтеха и технологий

у меня есть список телеграм каналов которые я хочу отслеживать.

хочу чтобы алгоритм два раза в сутки (12 дня и 6 вечера) проходился по списку каналов и подтягивал свежие публикации

каждую публикацию передаём в claude api и суммаризируем в одном предложении (желательно вытянуть именно суть)

собираем список таких публикаций (суммаризация и в скобках ссылка на канал в котором была публикация)

публикуем в определённом нашем канале («Вестник Эдтеха»)

отдельно: 

предусмотреть возможность дать отслеживаемому каналу приоритет (от 0 до 10, по умолчанию у всех 0) 

предусмотреть простой интерфейс как можно добавлять и убирать отслеживаемые каналы, менять у них приоритет  публикуем в порядке приоритета 

предусмотреть интерфейс ограничивать сколько новостей публикуем (по умолчанию, 10)

Стек технологий

Python + SQLite + Flask + python-telegram-bot

Почему именно этот стек:

Python простой в разработке и отладке

SQLite не требует настройки сервера БД

Flask минималистичен для админ-панели

python-telegram-bot стабильная библиотека

Архитектура системы

1. База данных (SQLite)

sql

-- Таблица отслеживаемых каналов
channels:
  id, username, priority (0-10), is_active, last_message_id, created_at

-- Таблица обработанных сообщений (для избежания дублей)
processed_messages:
  id, channel_id, message_id, processed_at

-- Настройки системы  
settings:
  key, value (max_news_count, target_channel, etc.)

2. Основные компоненты

news_collector.py - основной скрипт сбора:

python

def collect_news():
    channels = get_active_channels_by_priority()
    news_items = []
    
    for channel in channels:
        new_messages = get_new_messages(channel)
        for msg in new_messages:
            summary = summarize_with_claude(msg.text)
            news_items.append({
                'summary': summary,
                'channel': channel.username,
                'priority': channel.priority,
                'link': msg.link
            })
    
    publish_digest(news_items[:get_max_news_count()])

admin_panel.py - Flask веб-интерфейс:

python

# Простые HTML формы для:
# - Добавления/удаления каналов
# - Изменения приоритетов  
# - Настройки лимита новостей
# - Просмотра логов последних запусков

3. Деплой и запуск

Вариант 1: VPS с cron

bash

# Два раза в день
0 12 * * * /path/to/python /path/to/news_collector.py
0 18 * * * /path/to/python /path/to/news_collector.py

Вариант 2: GitHub Actions (бесплатно)

yaml

# .github/workflows/news_digest.yml
- cron: '0 9,15 * * *'  # 12:00 и 18:00 МСК

4. Получение сообщений из каналов

Два подхода:

Telethon - получает сообщения через Telegram Client API (нужен API key)

RSS парсер - если каналы публичные, можно через t.me/channelname/rss

Рекомендую Telethon - стабильнее и больше контроля.

5. Обработка ошибок

python

# Логирование в файл
# Retry механизм для Claude API
# Fallback если Claude недоступен
# Уведомления админу при критических ошибках

деплоить будем через railway, импорт из github

Критерии приёмки и поэтапная валидация
Этап 1: Настройка инфраструктуры
Критерии приёмки:

 SQLite база создается с корректной схемой
 Все зависимости устанавливаются без ошибок
 Переменные окружения корректно читаются
 Логирование работает (пишет в файл и консоль)

Тест: Запустить python init_db.py - должен создать базу с таблицами
Этап 2: Подключение к Telegram API
Критерии приёмки:

 Успешная авторизация через Telethon
 Получение списка доступных каналов
 Чтение последних 5 сообщений из тестового канала
 Корректная обработка приватных/публичных каналов

Тест: Скрипт test_telegram.py выводит последние сообщения
Этап 3: Интеграция с Claude API
Критерии приёмки:

 Успешный вызов Claude API с тестовым текстом
 Обработка ошибок API (лимиты, недоступность)
 Retry механизм с экспоненциальной задержкой
 Fallback при недоступности (сохранение оригинального текста)

Тест: test_claude.py суммаризирует 3 разных текста
Этап 4: Сбор и обработка новостей
Критерии приёмки:

 Отслеживание last_message_id для избежания дублей
 Фильтрация сообщений по времени (последние 12 часов)
 Сортировка по приоритету каналов
 Ограничение количества новостей (настройка)
 Корректное формирование ссылок на сообщения

Тест: Запуск на 2-3 тестовых каналах, проверка вывода
Этап 5: Публикация в канал
Критерии приёмки:

 Успешная отправка сообщения в целевой канал
 Корректное форматирование (Markdown)
 Обработка лимитов Telegram API (не чаще 30 сообщений/сек)
 Логирование успешных публикаций

Тест: Отправка тестового дайджеста в канал
Этап 6: Веб-интерфейс (Flask)
Критерии приёмки:

 Список каналов с возможностью редактирования
 Добавление/удаление каналов через форму
 Изменение приоритетов и настроек
 Просмотр логов последних запусков
 Базовая аутентификация (логин/пароль)

Тест: Все CRUD операции работают через браузер
Мониторинг и надёжность
Обязательные логи:
pythonINFO: "Started news collection at 2024-01-15 12:00:01"
INFO: "Channel @edtech_news: found 3 new messages"  
ERROR: "Claude API error: rate limit exceeded, retrying in 60s"
SUCCESS: "Published digest with 8 news items"
Метрики успеха:

Uptime > 95% (успешные запуски по расписанию)
Время обработки < 5 минут
Доля успешных суммаризаций > 90%
Нет дублирующихся новостей

Настройки для Railway:
python# railway.json
{
  "build": {
    "builder": "NIXPACKS"
  },
  "deploy": {
    "restartPolicyType": "ON_FAILURE",
    "cronJobs": [
      {
        "command": "python news_collector.py",
        "schedule": "0 9,15 * * *"
      }
    ]
  }
}
Health check эндпоинт:
python@app.route('/health')
def health():
    return {
        'status': 'ok',
        'last_run': get_last_run_time(),
        'channels_count': get_active_channels_count(),
        'database': 'connected' if test_db() else 'error'
    }
Чек-лист для каждого этапа:
Перед переходом к следующему этапу:

✅ Все тесты пройдены
✅ Код покрыт логированием
✅ Обработка ошибок реализована
✅ Ручное тестирование выполнено
✅ Коммит с тегом этапа

Стратегия отката:

Каждый этап — отдельная ветка в git
Environment variables для переключения между dev/prod
Возможность отключить автоматические запуски через админ-панель