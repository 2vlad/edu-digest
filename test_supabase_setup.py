#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase –¥–ª—è EdTech News Digest Bot
"""
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = {
        'SUPABASE_URL': 'URL –ø—Ä–æ–µ–∫—Ç–∞ Supabase',
        'SUPABASE_ANON_KEY': 'Anon/Public API Key –∏–∑ Supabase',
        'DATABASE_URL': 'PostgreSQL connection string'
    }
    
    optional_vars = {
        'TELEGRAM_API_ID': 'Telegram API ID',
        'TELEGRAM_API_HASH': 'Telegram API Hash',
        'TELEGRAM_BOT_TOKEN': 'Telegram Bot Token',
        'ANTHROPIC_API_KEY': 'Claude AI API Key'
    }
    
    missing_required = []
    missing_optional = []
    
    for var, desc in required_vars.items():
        if os.getenv(var):
            print(f"  ‚úÖ {var}: {'*' * 20}... ({desc})")
        else:
            print(f"  ‚ùå {var}: –ù–ï –ù–ê–°–¢–†–û–ï–ù ({desc})")
            missing_required.append(var)
    
    for var, desc in optional_vars.items():
        if os.getenv(var):
            print(f"  ‚úÖ {var}: {'*' * 20}... ({desc})")
        else:
            print(f"  ‚ö†Ô∏è {var}: –ù–ï –ù–ê–°–¢–†–û–ï–ù ({desc})")
            missing_optional.append(var)
    
    return missing_required, missing_optional

def test_supabase_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")
    
    try:
        from src.database import test_db, supabase_db
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if supabase_db.initialize():
            print("  ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if test_db():
                print("  ‚úÖ –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω")
                return True
            else:
                print("  ‚ùå –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è")
                return False
        else:
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_database_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from src.database import ChannelsDB, SettingsDB
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        test_setting = SettingsDB.get_setting('max_news_count', '10')
        print(f"  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ max_news_count: {test_setting}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
        channels = ChannelsDB.get_active_channels()
        print(f"  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
        
        if channels:
            for i, channel in enumerate(channels[:3], 1):
                print(f"    {i}. {channel['username']} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {channel['priority']})")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ EdTech News Digest Bot (Supabase)")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    missing_required, missing_optional = check_environment()
    
    if missing_required:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        for var in missing_required:
            print(f"   - {var}")
        print("\nüí° –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª –∏–ª–∏ environment")
        return False
    
    if missing_optional:
        print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        for var in missing_optional:
            print(f"   - {var}")
        print("üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —ç—Ç–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
    if not test_supabase_connection():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å SUPABASE_URL, SUPABASE_ANON_KEY –∏ DATABASE_URL")
        return False
    
    # –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    if not test_database_operations():
        print("\n‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py init")
        return False
    
    print("\n‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
    print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("  1. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: python main.py admin")
    print("  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π: python main.py collect")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 