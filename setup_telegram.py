#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø–µ—Ä–≤–∏—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
"""
import asyncio
import sys
import os
import getpass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.telegram_client import TelegramNewsCollector

async def setup_telegram_auth():
    """–ü–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram")
    print("="*40)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")
    print("–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞—Å—Ç—Å—è —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞")
    print()
    
    collector = TelegramNewsCollector()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        await collector.initialize_client()
        
        if collector.is_authorized:
            print("‚úÖ –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
            me = await collector.client.get_me()
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} (@{me.username})")
            return True
        
        print("üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +79001234567): ")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
        if not await collector.authorize_with_phone(phone):
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞")
            return False
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS: ")
        
        result = await collector.verify_code(phone, code)
        
        if result is True:
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            me = await collector.client.get_me()
            print(f"   –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {me.first_name}!")
            return True
            
        elif result == "2fa_required":
            print("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            password = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
            
            if await collector.sign_in_with_password(password):
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA —É—Å–ø–µ—à–Ω–∞!")
                return True
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å 2FA")
                return False
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False
    
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        return False
    finally:
        await collector.disconnect()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω—ã:")
    print("- TELEGRAM_API_ID")
    print("- TELEGRAM_API_HASH")
    print()
    
    proceed = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É? (y/N): ")
    if proceed.lower() not in ['y', 'yes', '–¥–∞']:
        print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    success = await setup_telegram_auth()
    
    if success:
        print("\nüéâ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
        print("üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: edu_digest_bot.session")
        print("üîÑ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python test_telegram.py")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    asyncio.run(main())