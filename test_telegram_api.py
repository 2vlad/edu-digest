#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ–º –ª–∏ –º—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ä–µ–∞–ª—å–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append('src')

async def test_telegram_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
    print("üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from config import TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_BOT_TOKEN
    
    print(f"üîç Environment Variables Check:")
    print(f"   TELEGRAM_API_ID: {'‚úÖ Set' if TELEGRAM_API_ID else '‚ùå Missing'}")
    print(f"   TELEGRAM_API_HASH: {'‚úÖ Set' if TELEGRAM_API_HASH else '‚ùå Missing'}")
    print(f"   TELEGRAM_BOT_TOKEN: {'‚úÖ Set' if TELEGRAM_BOT_TOKEN else '‚ùå Missing'}")
    
    if not TELEGRAM_API_ID or not TELEGRAM_API_HASH:
        print("\n‚ùå CRITICAL ERROR: Missing Telegram API credentials")
        print("üí° Required variables:")
        print("   - TELEGRAM_API_ID (get from https://my.telegram.org/auth)")
        print("   - TELEGRAM_API_HASH (get from https://my.telegram.org/auth)")
        print("   - TELEGRAM_BOT_TOKEN (get from @BotFather)")
        return False
    
    print(f"\nüîó Testing Telegram connection...")
    
    try:
        # –¢–µ—Å—Ç —á–µ—Ä–µ–∑ Telethon (User API)
        print("üîµ Testing Telethon User API...")
        from telegram_reader import get_telegram_reader
        
        reader = await get_telegram_reader()
        if reader and reader.initialized:
            print("‚úÖ Telethon User API connection successful")
            
            # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
            print("üì∫ Testing channel reading...")
            test_channel = "@edtexno"  # –ü–æ–ø—É–ª—è—Ä–Ω—ã–π EdTech –∫–∞–Ω–∞–ª
            
            try:
                messages = await reader.get_channel_messages(test_channel, limit=3, hours_lookback=24)
                if messages:
                    print(f"‚úÖ Successfully read {len(messages)} messages from {test_channel}")
                    for i, msg in enumerate(messages[:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                        print(f"   üìÑ Message {i+1}: {msg.get('text', 'No text')[:100]}...")
                else:
                    print(f"‚ö†Ô∏è No messages found in {test_channel} (last 24 hours)")
                    
            except Exception as channel_error:
                print(f"‚ùå Error reading channel {test_channel}: {channel_error}")
                
        else:
            print("‚ùå Telethon User API connection failed")
            
    except Exception as telethon_error:
        print(f"‚ùå Telethon error: {telethon_error}")
    
    try:
        # –¢–µ—Å—Ç —á–µ—Ä–µ–∑ python-telegram-bot (Bot API)
        print("\nüîµ Testing Bot API...")
        from telegram_publisher import TelegramPublisher
        
        publisher = TelegramPublisher()
        if await publisher.test_connection():
            print("‚úÖ Bot API connection successful")
        else:
            print("‚ùå Bot API connection failed")
            
    except Exception as bot_error:
        print(f"‚ùå Bot API error: {bot_error}")
    
    print("\n" + "=" * 50)
    print("üîß RECOMMENDATIONS:")
    
    if not TELEGRAM_API_ID or not TELEGRAM_API_HASH:
        print("1. üîë Add missing Telegram API credentials to Railway")
        print("   - Go to https://my.telegram.org/auth")
        print("   - Create an application to get API_ID and API_HASH")
        print("   - Add them to Railway Environment Variables")
        
    print("2. üì± Ensure the Telegram account has access to target channels")
    print("3. üåê Check network connectivity to Telegram servers")
    print("4. üîÑ Redeploy Railway service after adding variables")
    
    return True

if __name__ == "__main__":
    asyncio.run(test_telegram_connection())