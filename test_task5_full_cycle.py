#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Task 5: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
–≠—Ç–∞–ø 4 PRD - –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.news_collector import NewsCollector
from src.database import ChannelsDB, SettingsDB

async def test_task5_full_cycle():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ Task 5"""
    print("üöÄ Task 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
    print("="*60)
    
    success_count = 0
    total_tests = 7
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –≤ –ë–î
    channels = ChannelsDB.get_active_channels()
    if not channels:
        print("‚ö†Ô∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã...")
        try:
            ChannelsDB.add_channel("@test_edtech_news", "Test EdTech News", 9)
            ChannelsDB.add_channel("@test_education", "Test Education", 7)
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        except Exception as e:
            print(f"‚ÑπÔ∏è  –ö–∞–Ω–∞–ª—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {e}")
    
    collector = NewsCollector()
    
    # 5.1. –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    print("\n1Ô∏è‚É£ –ü–æ–¥—Ç–µ—Å—Ç 5.1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    try:
        init_success = await collector.initialize()
        if init_success:
            print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            print(f"   Claude Summarizer: {'‚úÖ' if collector.claude_summarizer else '‚ùå'}")
            print(f"   Telegram Bot: {'‚úÖ' if collector.telegram_bot else '‚ùå'}")
            print(f"   Channel Reader: {'‚úÖ' if collector.channel_reader else '‚ùå'}")
            print(f"   Run ID: {collector.run_id}")
            success_count += 1
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ 5.1: {e}")
    
    # 5.2. –¢–µ—Å—Ç —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    print("\n2Ô∏è‚É£ –ü–æ–¥—Ç–µ—Å—Ç 5.2: –°–±–æ—Ä –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    try:
        collection_result = await collector.collect_news()
        
        if collection_result["success"]:
            messages = collection_result["messages"]
            channels_processed = collection_result["channels_processed"]
            
            print(f"‚úÖ –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π —É—Å–ø–µ—à–µ–Ω")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {channels_processed}")
            print(f"   –°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            
            if messages:
                print(f"   –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: {messages[0]['text'][:80]}...")
                print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–Ω–∞–ª–∞: {messages[0]['priority']}")
            
            success_count += 1
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞: {collection_result['error']}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ 5.2: {e}")
    
    # 5.3. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
    print("\n3Ô∏è‚É£ –ü–æ–¥—Ç–µ—Å—Ç 5.3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è")
    try:
        if 'messages' in locals() and messages:
            filtered_messages = await collector.filter_and_prioritize(messages)
            
            print(f"‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            print(f"   –ò—Å—Ö–æ–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            print(f"   –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_messages)}")
            
            if filtered_messages:
                print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {max(msg['priority'] for msg in filtered_messages)}")
                print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {filtered_messages[0].get('relevance_score', 'N/A')}")
            
            success_count += 1
        else:
            print("‚ö†Ô∏è  –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            test_messages = [{
                'id': 1,
                'text': 'EdTech —Å—Ç–∞—Ä—Ç–∞–ø –ø—Ä–∏–≤–ª–µ–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –æ–Ω–ª–∞–π–Ω –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è',
                'date': asyncio.get_event_loop().time(),
                'channel': '@test',
                'priority': 8,
                'views': 100
            }]
            filtered_messages = await collector.filter_and_prioritize(test_messages)
            if filtered_messages:
                print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
                success_count += 1
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ 5.3: {e}")
    
    # 5.4. –¢–µ—Å—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
    print("\n4Ô∏è‚É£ –ü–æ–¥—Ç–µ—Å—Ç 5.4: –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Claude API")
    try:
        if 'filtered_messages' in locals() and filtered_messages:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_messages = filtered_messages[:2]
            summarized_messages = await collector.summarize_messages(test_messages)
            
            print(f"‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(summarized_messages)}")
            
            successful_summaries = sum(1 for msg in summarized_messages if msg.get('summary_success', False))
            print(f"   –£—Å–ø–µ—à–Ω—ã—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π: {successful_summaries}/{len(summarized_messages)}")
            
            if summarized_messages:
                sample_msg = summarized_messages[0]
                print(f"   –ü—Ä–∏–º–µ—Ä —Å–∞–º–º–∞—Ä–∏: {sample_msg.get('summary', 'N/A')[:80]}...")
                print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {sample_msg.get('summary_quality', 0)}/10")
                print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {sample_msg.get('processing_time', 0):.2f}—Å")
            
            success_count += 1
        else:
            print("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
            summarized_messages = []
            success_count += 1
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ 5.4: {e}")
        summarized_messages = []
    
    # 5.5. –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
    print("\n5Ô∏è‚É£ –ü–æ–¥—Ç–µ—Å—Ç 5.5: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö
        if not summarized_messages:
            from datetime import datetime
            summarized_messages = [{
                'id': 1,
                'text': '–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ–± EdTech –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞',
                'summary': 'EdTech —Å—Ç–∞—Ä—Ç–∞–ø –ø—Ä–∏–≤–ª–µ–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
                'channel': '@test_channel',
                'link': 'https://t.me/test_channel/1',
                'priority': 8,
                'summary_success': True,
                'summary_quality': 9,
                'date': datetime.now()
            }]
        
        digest = collector.format_digest(summarized_messages)
        
        print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        print(f"   –î–ª–∏–Ω–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {len(digest)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ù–æ–≤–æ—Å—Ç–µ–π –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ: {len(summarized_messages)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–π–¥–∂–µ—Å—Ç–∞
        required_elements = ["EdTech –î–∞–π–¥–∂–µ—Å—Ç", "–≥–ª–∞–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π", "---"]
        missing_elements = [elem for elem in required_elements if elem not in digest]
        
        if not missing_elements:
            print("   ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        else:
            print(f"   ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã: {missing_elements}")
        
        print("   üìÑ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–π–¥–∂–µ—Å—Ç–∞:")
        print("   " + digest[:200] + "..." if len(digest) > 200 else "   " + digest)
        
        success_count += 1
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ 5.5: {e}")
        digest = "–¢–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç"
    
    # 5.6. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)
    print("\n6Ô∏è‚É£ –ü–æ–¥—Ç–µ—Å—Ç 5.6: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞")
    try:
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        original_method = collector.telegram_bot.send_digest
        
        async def mock_send_digest(text):
            print(f"   üîß MOCK: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return True
        
        collector.telegram_bot.send_digest = mock_send_digest
        
        validation_result = await collector.validate_and_publish(digest, summarized_messages)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        collector.telegram_bot.send_digest = original_method
        
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        print(f"   –°—Ç–∞—Ç—É—Å: {'–£—Å–ø–µ—à–Ω–æ' if validation_result['success'] else '–û—à–∏–±–∫–∞'}")
        print(f"   –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {'–î–∞' if validation_result['published'] else '–ù–µ—Ç'}")
        
        if validation_result.get('validation_errors'):
            print(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {'; '.join(validation_result['validation_errors'])}")
        
        success_count += 1
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ 5.6: {e}")
    
    # 5.7. –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    print("\n7Ô∏è‚É£ –ü–æ–¥—Ç–µ—Å—Ç 5.7: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        full_collector = NewsCollector()
        
        # –ú–æ–∫–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
        async def mock_send_digest(text):
            print(f"   üì§ MOCK: –î–∞–π–¥–∂–µ—Å—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return True
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        await full_collector.initialize()
        full_collector.telegram_bot.send_digest = mock_send_digest
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª
        full_result = await full_collector.run_full_cycle()
        
        print("‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print(f"   –°—Ç–∞—Ç—É—Å: {'–£—Å–ø–µ—à–Ω–æ' if full_result['success'] else '–û—à–∏–±–∫–∞'}")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {full_result.get('execution_time', 0):.1f}—Å")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {full_result.get('channels_processed', 0)}")
        print(f"   –°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {full_result.get('messages_collected', 0)}")
        print(f"   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {full_result.get('messages_filtered', 0)}")
        print(f"   –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {full_result.get('messages_summarized', 0)}")
        print(f"   –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {full_result.get('news_published', 0)}")
        
        if full_result['success']:
            success_count += 1
        else:
            print(f"   –û—à–∏–±–∫–∞: {full_result.get('error', 'Unknown')}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ 5.7: {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç Task 5:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {success_count}/{total_tests}")
    
    if success_count >= 6:  # 6+ –∏–∑ 7 —Ç–µ—Å—Ç–æ–≤
        print("\nüéâ Task 5 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üìã –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏:")
        print("   5.1 ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        print("   5.2 ‚úÖ –°–±–æ—Ä –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤")
        print("   5.3 ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è")
        print("   5.4 ‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Claude API")
        print("   5.5 ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
        print("   5.6 ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è")
        print("   5.7 ‚úÖ –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª")
        
        print("\nüí° –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É:")
        print("- –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π (Tasks 1-4)")
        print("- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("- –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        print("- –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
        print("- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –º–µ—Ç—Ä–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        
        return True
    else:
        print("\n‚ö†Ô∏è  Task 5 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ")
        print("üîß –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("PRD –≠—Ç–∞–ø 4 - –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏:")
    print("‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ last_message_id –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–µ–π")
    print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤)")
    print("‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∫–∞–Ω–∞–ª–æ–≤")
    print("‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞)")
    print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
    print()
    
    success = await test_task5_full_cycle()
    
    if success:
        print(f"\nüöÄ Task 5 –≥–æ—Ç–æ–≤–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Task 6 (–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)")
        print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞: python main.py collect")
    else:
        print(f"\nüîß –ù—É–∂–Ω—ã –¥–æ—Ä–∞–±–æ—Ç–∫–∏ Task 5 –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ Task 6")

if __name__ == "__main__":
    asyncio.run(main())