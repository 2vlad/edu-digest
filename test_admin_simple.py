#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º–ø–æ—Ä—Ç—ã –∏ –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def test_admin_imports_and_functions():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    print("üåê Task 6: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    print("="*45)
    
    success_count = 0
    total_tests = 5
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print("1Ô∏è‚É£ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    try:
        from src.admin_panel import app
        print("‚úÖ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {app.name}")
        print(f"   Secret key: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if app.secret_key else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        success_count += 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    try:
        routes = []
        for rule in app.url_map.iter_rules():
            if rule.endpoint != 'static':
                routes.append(f"{rule.rule} [{', '.join(rule.methods - {'OPTIONS', 'HEAD'})}]")
        
        print("‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
        for route in routes[:8]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8
            print(f"   {route}")
        if len(routes) > 8:
            print(f"   ... –∏ –µ—â–µ {len(routes) - 8}")
            
        expected_routes = ['/', '/channels', '/settings', '/logs', '/health']
        found_routes = [route for route in routes if any(exp in route for exp in expected_routes)]
        
        if len(found_routes) >= 4:
            success_count += 1
            print(f"   ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {len(found_routes)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {e}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏...")
    try:
        from src.admin_panel import get_dashboard_stats, get_run_logs
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_dashboard_stats()
        print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç:")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats.get('active_channels', 0)}")
        print(f"   –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {stats.get('total_channels', 0)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
        logs = get_run_logs(5)
        print(f"   –ó–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤: {len(logs)}")
        
        success_count += 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –ë–î: {e}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è HTML —à–∞–±–ª–æ–Ω–æ–≤...")
    try:
        template_dir = os.path.join(os.path.dirname(__file__), 'templates')
        expected_templates = ['base.html', 'dashboard.html', 'channels.html', 'settings.html', 'logs.html']
        
        existing_templates = []
        for template in expected_templates:
            template_path = os.path.join(template_dir, template)
            if os.path.exists(template_path):
                existing_templates.append(template)
                with open(template_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    print(f"   ‚úÖ {template}: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if len(existing_templates) >= 4:
            success_count += 1
            print(f"   ‚úÖ –®–∞–±–ª–æ–Ω–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(existing_templates)}/{len(expected_templates)}")
        else:
            print(f"   ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(existing_templates)}/{len(expected_templates)}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
    
    # –¢–µ—Å—Ç 5: –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    try:
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            from src.database import ChannelsDB
            channels = ChannelsDB.get_active_channels()
            
            print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   –ö–∞–Ω–∞–ª–æ–≤ –≤ –ë–î: {len(channels)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
            from src.admin_panel import health
            health_result = health()
            
            if isinstance(health_result, tuple):
                health_data, status_code = health_result
            else:
                health_data = health_result.get_json()
                status_code = 200
                
            print(f"   Health check: {health_data.get('status', 'unknown')}")
            print(f"   Database: {health_data.get('database', 'unknown')}")
            
            success_count += 1
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç Task 6:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {success_count}/{total_tests}")
    
    if success_count >= 4:  # 4+ –∏–∑ 5 —Ç–µ—Å—Ç–æ–≤
        print("\nüéâ Task 6 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üìã Flask –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≥–æ—Ç–æ–≤–∞:")
        print("   ‚úÖ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        print("   ‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        print("   ‚úÖ –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("   ‚úÖ HTML —à–∞–±–ª–æ–Ω—ã —Å–æ–∑–¥–∞–Ω—ã")
        print("   ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
        
        print("\nüí° –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:")
        print("   üè† –î–∞—à–±–æ—Ä–¥ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏")
        print("   üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ (CRUD)")
        print("   ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
        print("   üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∑–∞–ø—É—Å–∫–æ–≤")
        print("   üîó API endpoints")
        print("   ‚ù§Ô∏è  Health check")
        
        print(f"\nüåê –ó–∞–ø—É—Å–∫: python main.py admin")
        
        return True
    else:
        print("\n‚ö†Ô∏è  Task 6 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ")
        print("üîß –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("PRD –≠—Ç–∞–ø 6 - –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏:")
    print("‚úÖ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É")
    print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    print("‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤")
    print("‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)")
    print()
    
    success = test_admin_imports_and_functions()
    
    if success:
        print(f"\nüöÄ Task 6 –≥–æ—Ç–æ–≤–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Task 7")
    else:
        print(f"\nüîß –ù—É–∂–Ω—ã –¥–æ—Ä–∞–±–æ—Ç–∫–∏ Task 6")

if __name__ == "__main__":
    main()