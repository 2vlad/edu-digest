#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –∑–∞–ø—É—Å–∫–∞ EdTech News Digest Bot
–¢–û–õ–¨–ö–û SUPABASE - –ë–ï–ó SQLite FALLBACK
"""
import sys
import os
import asyncio
import logging
import traceback
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/main.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def log_startup_info():
    """–õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üöÄ Starting EdTech News Digest Bot v2.0.0 (Supabase Only)")
    logger.info("=" * 60)
    logger.info(f"üìÖ Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"üêç Python version: {sys.version}")
    logger.info(f"üìç Working directory: {os.getcwd()}")
    logger.info(f"üóÇÔ∏è Script path: {os.path.abspath(__file__)}")
    logger.info(f"üìã Command line: {' '.join(sys.argv)}")
    logger.info("=" * 60)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π)
    key_vars = ['RAILWAY_ENVIRONMENT', 'PORT', 'SUPABASE_URL', 'DATABASE_URL', 'TELEGRAM_API_ID']
    logger.info("üîç Key environment variables status:")
    for var in key_vars:
        status = "‚úÖ Set" if os.getenv(var) else "‚ùå Missing"
        logger.info(f"   {var}: {status}")

# –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
log_startup_info()

async def run_collect():
    """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    logger.info("üì° Starting news collection cycle...")
    
    try:
        logger.info("üì¶ Importing NewsCollector module...")
        from src.news_collector import NewsCollector
        
        logger.info("üîß Initializing NewsCollector...")
        collector = NewsCollector()
        
        logger.info("üöÄ Running full news collection cycle...")
        start_time = datetime.now()
        result = await collector.run_full_cycle()
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        logger.info(f"‚è±Ô∏è Collection cycle completed in {duration:.2f} seconds")
        
        if result["success"]:
            logger.info("‚úÖ News collection completed successfully!")
            logger.info(f"üìä Processed: {result['channels_processed']} channels, {result['messages_collected']} messages")
            logger.info(f"üì∞ Published: {result['news_published']} news items")
            
            print("‚úÖ –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result['channels_processed']} –∫–∞–Ω–∞–ª–æ–≤, {result['messages_collected']} —Å–æ–æ–±—â–µ–Ω–∏–π")
            print(f"üì∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {result['news_published']} –Ω–æ–≤–æ—Å—Ç–µ–π")
            return 0
        else:
            error_msg = result.get('error', 'Unknown error')
            logger.error(f"‚ùå News collection failed: {error_msg}")
            
            if 'supabase' in error_msg.lower() or 'database' in error_msg.lower():
                logger.error("üí° Likely cause: Supabase database connection issues")
                logger.error("üîß Check SUPABASE_URL, SUPABASE_ANON_KEY, and DATABASE_URL environment variables")
            elif 'telegram' in error_msg.lower():
                logger.error("üí° Likely cause: Telegram API credentials missing or invalid")
                logger.error("üîß Check TELEGRAM_API_ID and TELEGRAM_API_HASH environment variables")
                
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {error_msg}")
            return 1
            
    except ImportError as import_error:
        logger.error(f"‚ùå CRITICAL: Failed to import required modules: {import_error}")
        logger.error("üîß Check that all dependencies are installed and src/ path is correct")
        logger.error(f"üìã Full traceback: {traceback.format_exc()}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {import_error}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return 1
        
    except Exception as e:
        logger.error(f"‚ùå CRITICAL: Unexpected error during news collection: {e}")
        logger.error(f"üîç Exception type: {type(e).__name__}")
        logger.error(f"üìã Full traceback: {traceback.format_exc()}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

def run_admin():
    """–ó–∞–ø—É—Å–∫ Flask –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    logger.info("üåê Starting Flask admin panel...")
    
    try:
        logger.info("üì¶ Importing admin panel module...")
        from src.admin_panel import app
        from src.config import FLASK_PORT
        
        logger.info(f"üöÄ Starting Flask server on 0.0.0.0:{FLASK_PORT}")
        logger.info(f"üìç Admin panel URL: http://localhost:{FLASK_PORT}")
        
        print(f"üåê –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –Ω–∞ http://localhost:{FLASK_PORT}")
        app.run(host='0.0.0.0', port=FLASK_PORT, debug=False)
        
        logger.info("‚úÖ Flask admin panel started successfully")
        return 0
        
    except ImportError as import_error:
        logger.error(f"‚ùå CRITICAL: Failed to import admin panel modules: {import_error}")
        logger.error("üîß Check that all dependencies are installed")
        logger.error("üí° Run: pip install -r requirements.txt")
        logger.error(f"üìã Full traceback: {traceback.format_exc()}")
        
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {import_error}")
        print("üîß –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install -r requirements.txt")
        return 1
        
    except Exception as e:
        logger.error(f"‚ùå CRITICAL: Failed to start admin panel: {e}")
        logger.error(f"üîç Exception type: {type(e).__name__}")
        logger.error(f"üìã Full traceback: {traceback.format_exc()}")
        
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
        return 1

def run_init():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîß Starting database initialization...")
    
    try:
        from src.database import init_database, test_db
        
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase...")
        init_database()
        
        if test_db():
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
            return 0
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return 1
            
    except Exception as e:
        logger.error(f"‚ùå Database initialization failed: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase")
        return 1

if __name__ == "__main__":
    logger.info("üéØ Main script execution started")
    print("EdTech News Digest Bot v2.0.0 (Supabase Only)")
    print("="*50)
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        logger.info(f"üìã Command received: {command}")
        
        if command == "collect":
            logger.info("üéØ Executing: news collection")
            print("üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π...")
            exit_code = asyncio.run(run_collect())
            logger.info(f"üèÅ News collection finished with exit code: {exit_code}")
            sys.exit(exit_code)
            
        elif command == "admin":
            logger.info("üéØ Executing: admin panel")
            print("üåê –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
            exit_code = run_admin()
            logger.info(f"üèÅ Admin panel finished with exit code: {exit_code}")
            sys.exit(exit_code)
            
        elif command == "init":
            logger.info("üéØ Executing: database initialization")
            print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            exit_code = run_init()
            logger.info(f"üèÅ Database initialization finished with exit code: {exit_code}")
            sys.exit(exit_code)
            
        elif command == "scheduler":
            logger.info("üéØ Executing: scheduler")
            print("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            try:
                import subprocess
                # –ó–∞–ø—É—Å–∫–∞–µ–º scheduler.py –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
                subprocess.run([sys.executable, "scheduler.py"], check=True)
            except Exception as e:
                logger.error(f"‚ùå Scheduler error: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                sys.exit(1)
            
        else:
            logger.error(f"‚ùå Unknown command received: {command}")
            logger.error("üí° Available commands: collect, admin, init")
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            print("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: collect, admin, init, scheduler")
            sys.exit(1)
    else:
        logger.info("‚ÑπÔ∏è No command specified, showing help")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  python main.py collect    - –°–±–æ—Ä –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π")
        print("  python main.py admin      - –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        print("  python main.py init       - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("  python main.py scheduler  - –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        print()
        print("üìã –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:")
        print("  1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ")
        print("  2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: python main.py init")
        print("  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: python main.py admin")
        print()
        logger.info("üèÅ Help displayed, exiting")
        sys.exit(0)