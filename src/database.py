#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Supabase (PostgreSQL)
–¢–û–õ–¨–ö–û SUPABASE - –ë–ï–ó SQLite FALLBACK
–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥: REST API + PostgreSQL
"""

import os
import logging
import requests
from typing import List, Dict, Optional, Any
from datetime import datetime
from supabase import create_client, Client
import psycopg2
from psycopg2.extras import RealDictCursor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/database.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
try:
    from .config import SUPABASE_URL, SUPABASE_KEY, DATABASE_URL
except ImportError:
    from config import SUPABASE_URL, SUPABASE_KEY, DATABASE_URL

class SupabaseDB:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase —á–µ—Ä–µ–∑ REST API –∏ PostgreSQL"""
    
    def __init__(self):
        self.supabase: Client = None
        self.pg_connection = None
        self.initialized = False
        self.rest_api_url = None
        self.headers = None
    
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"""
        try:
            logger.info("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if not SUPABASE_URL:
                raise ValueError("‚ùå SUPABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            if not SUPABASE_KEY:
                raise ValueError("‚ùå SUPABASE_ANON_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
            logger.info(f"üîç Supabase URL: {SUPABASE_URL}")
            logger.info(f"üîë API Key: {SUPABASE_KEY[:20]}..." if SUPABASE_KEY else "‚ùå API Key –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ REST API
            self.rest_api_url = f"{SUPABASE_URL}/rest/v1"
            self.headers = {
                'apikey': SUPABASE_KEY,
                'Authorization': f'Bearer {SUPABASE_KEY}',
                'Content-Type': 'application/json',
                'Prefer': 'return=representation'
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å REST API
            try:
                response = requests.get(f"{self.rest_api_url}/", headers=self.headers, timeout=5)
                if response.status_code == 200:
                    logger.info("‚úÖ Supabase REST API –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è REST API –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
            except Exception as api_error:
                logger.warning(f"‚ö†Ô∏è REST API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {api_error}")
            
            # –°–æ–∑–¥–∞–µ–º Supabase client (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            try:
                self.supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
                logger.info("‚úÖ Supabase client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as supabase_error:
                logger.warning(f"‚ö†Ô∏è Supabase client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {supabase_error}")
                logger.info("üìù –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ REST API")
                self.supabase = None
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            if DATABASE_URL:
                try:
                    self.pg_connection = psycopg2.connect(
                        DATABASE_URL,
                        cursor_factory=RealDictCursor,
                        connect_timeout=5,
                        application_name="edu_digest_bot"
                    )
                    self.pg_connection.autocommit = True
                    logger.info("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                except Exception as pg_error:
                    logger.warning(f"‚ö†Ô∏è PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ: {pg_error}")
                    logger.info("üìù –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ REST API")
                    self.pg_connection = None
            
            self.initialized = True
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase: {e}")
            logger.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
            logger.error("   - SUPABASE_URL (Project URL)")
            logger.error("   - SUPABASE_ANON_KEY (anon public key)")  
            logger.error("   - DATABASE_URL (PostgreSQL connection string)")
            raise
    
    def execute_rest_query(self, table: str, method: str = 'GET', data: Dict = None, filters: Dict = None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ REST API"""
        if not self.initialized:
            self.initialize()
        
        try:
            url = f"{self.rest_api_url}/{table}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if filters:
                params = []
                for key, value in filters.items():
                    if isinstance(value, str):
                        params.append(f"{key}=eq.{value}")
                    else:
                        params.append(f"{key}=eq.{value}")
                if params:
                    url += "?" + "&".join(params)
            
            if method == 'GET':
                response = requests.get(url, headers=self.headers, timeout=10)
            elif method == 'POST':
                response = requests.post(url, headers=self.headers, json=data, timeout=10)
            elif method == 'PATCH':
                response = requests.patch(url, headers=self.headers, json=data, timeout=10)
            elif method == 'DELETE':
                response = requests.delete(url, headers=self.headers, timeout=10)
            else:
                raise ValueError(f"Unsupported method: {method}")
            
            if response.status_code in [200, 201, 204]:
                try:
                    return response.json() if response.content else []
                except:
                    return []
            elif response.status_code == 409:
                # –ö–æ–Ω—Ñ–ª–∏–∫—Ç - –æ–±—ã—á–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                error_detail = ""
                try:
                    error_data = response.json()
                    if 'details' in error_data:
                        error_detail = error_data['details']
                    elif 'message' in error_data:
                        error_detail = error_data['message']
                except:
                    pass
                
                if 'duplicate' in error_detail.lower() or 'unique' in error_detail.lower():
                    raise ValueError("–¢–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    raise ValueError(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö: {error_detail}")
            else:
                logger.error(f"‚ùå REST API error {response.status_code}: {response.text}")
                raise Exception(f"REST API error: {response.status_code}")
                
        except ValueError:
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º ValueError (—ç—Ç–æ –Ω–∞—à–∏ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
            raise
        except Exception as e:
            logger.error(f"‚ùå REST API –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω: {e}")
            raise
    
    def get_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)"""
        if not self.initialized:
            self.initialize()
        
        if self.pg_connection and not self.pg_connection.closed:
            return self.pg_connection
        
        # –ï—Å–ª–∏ PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å REST API
        return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
supabase_db = SupabaseDB()

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase...")
        
        if not supabase_db.initialize():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ SQL
        conn = supabase_db.get_connection()
        if conn is None:
            logger.warning("‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º REST API –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            # –¢–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –≤ Supabase Dashboard –∏–ª–∏ —á–µ—Ä–µ–∑ SQL —Ä–µ–¥–∞–∫—Ç–æ—Ä
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ REST API
            try:
                result = supabase_db.execute_rest_query('channels', 'GET')
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ channels –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ REST API")
                return True
            except Exception as api_error:
                logger.error(f"‚ùå REST API —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω: {api_error}")
                raise Exception("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ REST API")
        
        cursor = conn.cursor()
        
        logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS channels (
                id SERIAL PRIMARY KEY,
                username TEXT UNIQUE NOT NULL,
                display_name TEXT,
                priority INTEGER DEFAULT 0 CHECK (priority >= 0 AND priority <= 10),
                is_active BOOLEAN DEFAULT true,
                last_message_id BIGINT DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS processed_messages (
                id SERIAL PRIMARY KEY,
                channel_id INTEGER NOT NULL REFERENCES channels(id) ON DELETE CASCADE,
                message_id BIGINT NOT NULL,
                message_text TEXT,
                summary TEXT,
                processed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                published BOOLEAN DEFAULT false,
                UNIQUE(channel_id, message_id)
            )
        ''')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS settings (
                id SERIAL PRIMARY KEY,
                key TEXT UNIQUE NOT NULL,
                value TEXT NOT NULL,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –∑–∞–ø—É—Å–∫–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS run_logs (
                id SERIAL PRIMARY KEY,
                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed_at TIMESTAMP,
                status TEXT CHECK (status IN ('started', 'completed', 'failed')),
                channels_processed INTEGER DEFAULT 0,
                messages_collected INTEGER DEFAULT 0,
                news_published INTEGER DEFAULT 0,
                error_message TEXT
            )
        ''')
        
        # –í—Å—Ç–∞–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_settings = [
            ('max_news_count', '10', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ'),
            ('target_channel', '@vestnik_edtech', '–¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'),
            ('digest_times', '12:00,18:00', '–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤'),
            ('summary_max_length', '150', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏–º–≤–æ–ª–∞—Ö'),
            ('hours_lookback', '12', '–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏'),
        ]
        
        for key, value, description in default_settings:
            cursor.execute('''
                INSERT INTO settings (key, value, description, updated_at)
                VALUES (%s, %s, %s, CURRENT_TIMESTAMP)
                ON CONFLICT (key) DO NOTHING
            ''', (key, value, description))
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Supabase —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        cursor.execute("""
            SELECT table_name FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_type = 'BASE TABLE'
        """)
        tables = [row['table_name'] for row in cursor.fetchall()]
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase: {e}")
        raise

def test_db() -> bool:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"""
    try:
        if not supabase_db.initialized:
            supabase_db.initialize()
        
        conn = supabase_db.get_connection()
        if conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
            cursor.execute('SELECT 1 as test')
            result = cursor.fetchone()
            
            if result and result['test'] == 1:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —á–µ—Ä–µ–∑ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                logger.error("‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è")
                return False
        else:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º REST API
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ REST API...")
            try:
                result = supabase_db.execute_rest_query('channels', 'GET')
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —á–µ—Ä–µ–∑ REST API —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            except Exception as api_error:
                logger.error(f"‚ùå REST API —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω: {api_error}")
                return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Supabase DB: {e}")
        return False

def create_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    return supabase_db.get_connection()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏
class ChannelsDB:
    @staticmethod
    def add_channel(username: str, display_name: str = None, priority: int = 0) -> int:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è PostgreSQL
            conn = supabase_db.get_connection()
            if conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    INSERT INTO channels (username, display_name, priority, updated_at)
                    VALUES (%s, %s, %s, CURRENT_TIMESTAMP)
                    RETURNING id
                ''', (username, display_name or username, priority))
                
                result = cursor.fetchone()
                channel_id = result['id']
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ PostgreSQL: {username} (ID: {channel_id})")
                return channel_id
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API
                logger.info("üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
                data = {
                    'username': username,
                    'display_name': display_name or username,
                    'priority': priority,
                    'updated_at': datetime.now().isoformat()
                }
                
                result = supabase_db.execute_rest_query('channels', 'POST', data)
                if result and len(result) > 0:
                    channel_id = result[0]['id']
                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ REST API: {username} (ID: {channel_id})")
                    return channel_id
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ REST API")
            
        except psycopg2.IntegrityError:
            logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            raise ValueError(f"–ö–∞–Ω–∞–ª {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except ValueError as ve:
            # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ ValueError (–æ—Ç REST API –∏–ª–∏ –¥—Ä—É–≥–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏), –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
            if "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in str(ve) or "already exists" in str(ve).lower():
                logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                raise ValueError(f"–ö–∞–Ω–∞–ª {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                raise ve
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {username}: {e}")
            
            # –ï—Å–ª–∏ PostgreSQL –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º REST API –∫–∞–∫ fallback
            if 'connection' in str(e).lower() or 'gssapi' in str(e).lower():
                try:
                    logger.info("üì° Fallback –Ω–∞ REST API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
                    data = {
                        'username': username,
                        'display_name': display_name or username,
                        'priority': priority,
                        'updated_at': datetime.now().isoformat()
                    }
                    
                    result = supabase_db.execute_rest_query('channels', 'POST', data)
                    if result and len(result) > 0:
                        channel_id = result[0]['id']
                        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ REST API fallback: {username} (ID: {channel_id})")
                        return channel_id
                    else:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ REST API fallback")
                except ValueError as ve:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç REST API
                    if "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in str(ve) or "already exists" in str(ve).lower():
                        logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (REST API)")
                        raise ValueError(f"–ö–∞–Ω–∞–ª {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        raise ve
                except Exception as api_error:
                    logger.error(f"‚ùå REST API fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {api_error}")
                    raise
            else:
                raise
    
    @staticmethod
    def get_active_channels() -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è PostgreSQL
            conn = supabase_db.get_connection()
            if conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT * FROM channels 
                    WHERE is_active = true 
                    ORDER BY priority DESC, created_at ASC
                ''')
                
                channels = [dict(row) for row in cursor.fetchall()]
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ PostgreSQL")
                return channels
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API
                logger.info("üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤")
                result = supabase_db.execute_rest_query('channels', 'GET', filters={'is_active': 'true'})
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                if result:
                    result.sort(key=lambda x: (-x.get('priority', 0), x.get('created_at', '')))
                
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ REST API")
                return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
            
            # Fallback –Ω–∞ REST API
            if 'connection' in str(e).lower() or 'gssapi' in str(e).lower():
                try:
                    logger.info("üì° Fallback –Ω–∞ REST API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤")
                    result = supabase_db.execute_rest_query('channels', 'GET', filters={'is_active': 'true'})
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                    if result:
                        result.sort(key=lambda x: (-x.get('priority', 0), x.get('created_at', '')))
                    
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ REST API fallback")
                    return result
                except Exception as api_error:
                    logger.error(f"‚ùå REST API fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {api_error}")
                    return []
            return []
    
    @staticmethod
    def delete_channel(channel_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è PostgreSQL
            conn = supabase_db.get_connection()
            if conn:
                cursor = conn.cursor()
                
                cursor.execute('DELETE FROM channels WHERE id = %s', (channel_id,))
                
                if cursor.rowcount > 0:
                    logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ PostgreSQL")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                    return False
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API
                logger.info("üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
                result = supabase_db.execute_rest_query('channels', 'DELETE', filters={'id': channel_id})
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ REST API")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            
            # Fallback –Ω–∞ REST API
            if 'connection' in str(e).lower() or 'gssapi' in str(e).lower():
                try:
                    logger.info("üì° Fallback –Ω–∞ REST API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
                    result = supabase_db.execute_rest_query('channels', 'DELETE', filters={'id': channel_id})
                    logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ REST API fallback")
                    return True
                except Exception as api_error:
                    logger.error(f"‚ùå REST API fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {api_error}")
                    raise
            else:
                raise
    
    @staticmethod
    def toggle_channel_status(channel_id: int) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞ (–∞–∫—Ç–∏–≤–µ–Ω/–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            current_channel = None
            
            # –ü—ã—Ç–∞–µ–º—Å—è PostgreSQL
            conn = supabase_db.get_connection()
            if conn:
                cursor = conn.cursor()
                
                cursor.execute('SELECT is_active FROM channels WHERE id = %s', (channel_id,))
                result = cursor.fetchone()
                if result:
                    current_channel = result
                    new_status = not result['is_active']
                    
                    cursor.execute('''
                        UPDATE channels 
                        SET is_active = %s, updated_at = CURRENT_TIMESTAMP
                        WHERE id = %s
                    ''', (new_status, channel_id))
                    
                    if cursor.rowcount > 0:
                        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞ {channel_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status} —á–µ—Ä–µ–∑ PostgreSQL")
                        return True
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API
                logger.info("üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                channels = supabase_db.execute_rest_query('channels', 'GET', filters={'id': channel_id})
                if channels and len(channels) > 0:
                    current_channel = channels[0]
                    new_status = not current_channel.get('is_active', True)
                    
                    update_data = {
                        'is_active': new_status,
                        'updated_at': datetime.now().isoformat()
                    }
                    
                    supabase_db.execute_rest_query('channels', 'PATCH', update_data, filters={'id': channel_id})
                    logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞ {channel_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status} —á–µ—Ä–µ–∑ REST API")
                    return True
                    
            if not current_channel:
                logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            
            # Fallback –Ω–∞ REST API
            if 'connection' in str(e).lower() or 'gssapi' in str(e).lower():
                try:
                    logger.info("üì° Fallback –Ω–∞ REST API –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                    channels = supabase_db.execute_rest_query('channels', 'GET', filters={'id': channel_id})
                    if channels and len(channels) > 0:
                        current_channel = channels[0]
                        new_status = not current_channel.get('is_active', True)
                        
                        update_data = {
                            'is_active': new_status,
                            'updated_at': datetime.now().isoformat()
                        }
                        
                        supabase_db.execute_rest_query('channels', 'PATCH', update_data, filters={'id': channel_id})
                        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞ {channel_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status} —á–µ—Ä–µ–∑ REST API fallback")
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ fallback")
                        return False
                        
                except Exception as api_error:
                    logger.error(f"‚ùå REST API fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {api_error}")
                    raise
            else:
                raise
    
    @staticmethod
    def update_last_message_id(channel_id: int, message_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            conn = supabase_db.get_connection()
            if conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    UPDATE channels 
                    SET last_message_id = %s, updated_at = CURRENT_TIMESTAMP
                    WHERE id = %s
                ''', (message_id, channel_id))
                
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω last_message_id –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API
                logger.info("üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_message_id")
                
                update_data = {
                    'last_message_id': message_id,
                    'updated_at': datetime.now().isoformat()
                }
                
                supabase_db.execute_rest_query('channels', 'PATCH', update_data, filters={'id': channel_id})
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω last_message_id –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} —á–µ—Ä–µ–∑ REST API")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_message_id: {e}")
            
            # Fallback –Ω–∞ REST API
            if 'connection' in str(e).lower() or 'gssapi' in str(e).lower():
                try:
                    logger.info("üì° Fallback –Ω–∞ REST API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_message_id")
                    
                    update_data = {
                        'last_message_id': message_id,
                        'updated_at': datetime.now().isoformat()
                    }
                    
                    supabase_db.execute_rest_query('channels', 'PATCH', update_data, filters={'id': channel_id})
                    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω last_message_id –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} —á–µ—Ä–µ–∑ REST API fallback")
                    
                except Exception as api_error:
                    logger.error(f"‚ùå REST API fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {api_error}")
                    raise
            else:
                raise

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
class SettingsDB:
    @staticmethod
    def get_setting(key: str, default: str = None) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è PostgreSQL
            conn = supabase_db.get_connection()
            if conn:
                cursor = conn.cursor()
                
                cursor.execute('SELECT value FROM settings WHERE key = %s', (key,))
                result = cursor.fetchone()
                value = result['value'] if result else default
                
                logger.debug(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} = {value} (PostgreSQL)")
                return value
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API
                logger.debug("üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                result = supabase_db.execute_rest_query('settings', 'GET', filters={'key': key})
                
                if result and len(result) > 0:
                    value = result[0]['value']
                    logger.debug(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} = {value} (REST API)")
                    return value
                else:
                    logger.debug(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} = {default} (default)")
                    return default
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
            
            # Fallback –Ω–∞ REST API
            if 'connection' in str(e).lower() or 'gssapi' in str(e).lower():
                try:
                    logger.debug("üì° Fallback –Ω–∞ REST API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                    result = supabase_db.execute_rest_query('settings', 'GET', filters={'key': key})
                    
                    if result and len(result) > 0:
                        value = result[0]['value']
                        logger.debug(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} = {value} (REST API fallback)")
                        return value
                    else:
                        return default
                except Exception as api_error:
                    logger.error(f"‚ùå REST API fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {api_error}")
                    return default
            return default
    
    @staticmethod
    def set_setting(key: str, value: str, description: str = None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è PostgreSQL
            conn = supabase_db.get_connection()
            if conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    INSERT INTO settings (key, value, description, updated_at)
                    VALUES (%s, %s, %s, CURRENT_TIMESTAMP)
                    ON CONFLICT (key) DO UPDATE SET
                        value = EXCLUDED.value,
                        description = COALESCE(EXCLUDED.description, settings.description),
                        updated_at = CURRENT_TIMESTAMP
                ''', (key, value, description))
                
                logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ {value} (PostgreSQL)")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API - —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å, –ø–æ—Ç–æ–º —Å–æ–∑–¥–∞—Ç—å
                logger.info("üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                existing = supabase_db.execute_rest_query('settings', 'GET', filters={'key': key})
                
                data = {
                    'key': key,
                    'value': value,
                    'description': description,
                    'updated_at': datetime.now().isoformat()
                }
                
                if existing and len(existing) > 0:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                    update_data = {
                        'value': value,
                        'updated_at': datetime.now().isoformat()
                    }
                    if description:
                        update_data['description'] = description
                    
                    supabase_db.execute_rest_query('settings', 'PATCH', update_data, filters={'key': key})
                    logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ {value} (REST API)")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                    supabase_db.execute_rest_query('settings', 'POST', data)
                    logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} —Å–æ–∑–¥–∞–Ω–∞ –≤ {value} (REST API)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
            
            # Fallback –Ω–∞ REST API
            if 'connection' in str(e).lower() or 'gssapi' in str(e).lower():
                try:
                    logger.info("üì° Fallback –Ω–∞ REST API –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                    existing = supabase_db.execute_rest_query('settings', 'GET', filters={'key': key})
                    
                    data = {
                        'key': key,
                        'value': value,
                        'description': description,
                        'updated_at': datetime.now().isoformat()
                    }
                    
                    if existing and len(existing) > 0:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                        update_data = {
                            'value': value,
                            'updated_at': datetime.now().isoformat()
                        }
                        if description:
                            update_data['description'] = description
                        
                        supabase_db.execute_rest_query('settings', 'PATCH', update_data, filters={'key': key})
                        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ {value} (REST API fallback)")
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                        supabase_db.execute_rest_query('settings', 'POST', data)
                        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} —Å–æ–∑–¥–∞–Ω–∞ –≤ {value} (REST API fallback)")
                        
                except Exception as api_error:
                    logger.error(f"‚ùå REST API fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {api_error}")
                    raise
            else:
                raise

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
class ProcessedMessagesDB:
    @staticmethod
    def is_message_processed(channel_id: int, message_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"""
        try:
            conn = supabase_db.get_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT 1 FROM processed_messages 
                WHERE channel_id = %s AND message_id = %s
            ''', (channel_id, message_id))
            
            result = cursor.fetchone()
            return result is not None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    @staticmethod
    def mark_message_processed(channel_id: int, message_id: int, 
                             message_text: str = None, summary: str = None) -> int:
        """–û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ"""
        try:
            conn = supabase_db.get_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO processed_messages 
                (channel_id, message_id, message_text, summary, processed_at)
                VALUES (%s, %s, %s, %s, CURRENT_TIMESTAMP)
                ON CONFLICT (channel_id, message_id) DO UPDATE SET
                    message_text = EXCLUDED.message_text,
                    summary = EXCLUDED.summary,
                    processed_at = CURRENT_TIMESTAMP
                RETURNING id
            ''', (channel_id, message_id, message_text, summary))
            
            result = cursor.fetchone()
            record_id = result['id']
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ (ID: {record_id})")
            return record_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise

def get_database_info() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    return {
        'type': 'PostgreSQL (Supabase)',
        'url': SUPABASE_URL,
        'database_url': DATABASE_URL[:50] + "..." if DATABASE_URL and len(DATABASE_URL) > 50 else DATABASE_URL,
        'persistent': True,
        'railway_compatible': True,
        'production_ready': True
    } 