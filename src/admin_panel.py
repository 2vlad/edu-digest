#!/usr/bin/env python3
"""
Task 6: Flask –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è EdTech News Digest Bot
–°–¢–†–û–ì–û –¢–û–õ–¨–ö–û SUPABASE MODE!
"""

import os
import sys
import logging
from datetime import datetime, timedelta
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/admin_panel.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)
logger.info("üöÄ Starting Admin Panel - SUPABASE ONLY MODE")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))

try:
    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ (–ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ main.py)
    logger.info("üì¶ Attempting relative import...")
    from .db_adapter import (ChannelsDB, ProcessedMessagesDB, SettingsDB, 
                            create_connection, get_database_info)
    from .config import FLASK_SECRET_KEY, FLASK_PORT
    logger.info("‚úÖ Relative import successful")
except ImportError as e:
    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç (–ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ)
    logger.info(f"üîÑ Relative import failed: {e}, trying absolute import...")
    try:
        from db_adapter import (ChannelsDB, ProcessedMessagesDB, SettingsDB, 
                               create_connection, get_database_info)
        from config import FLASK_SECRET_KEY, FLASK_PORT
        logger.info("‚úÖ Absolute import successful")
    except ImportError as abs_error:
        logger.error(f"‚ùå Both imports failed: relative={e}, absolute={abs_error}")
        raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
logger.info("üåê Initializing Flask application...")
template_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'templates')
logger.info(f"üìÅ Template directory: {template_dir}")
app = Flask(__name__, template_folder=template_dir)
app.secret_key = FLASK_SECRET_KEY
logger.info("‚úÖ Flask app initialized")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
logger.info("üîç Getting database information...")
db_info = get_database_info()
app.config['DATABASE_INFO'] = db_info
logger.info(f"üóÑÔ∏è Database configuration: {db_info}")
print(f"üóÑÔ∏è Database configuration: {db_info['type']}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def get_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    return create_connection()

def get_run_logs(limit=20):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∑–∞–ø—É—Å–∫–æ–≤"""
    conn = get_db()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            SELECT * FROM run_logs 
            ORDER BY started_at DESC 
            LIMIT ?
        ''', (limit,))
        logs = [dict(row) for row in cursor.fetchall()]
        return logs
    finally:
        conn.close()

def get_dashboard_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    import logging
    logger = logging.getLogger(__name__)
    
    logger.info("üìä Getting dashboard statistics...")
    
    conn = None
    try:
        logger.info("üîó Getting database connection...")
        conn = get_db()
        cursor = conn.cursor()
        logger.info("‚úÖ Database connection established")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        logger.info("üîç Checking if tables exist...")
        
        if USE_SUPABASE:
            # PostgreSQL –∑–∞–ø—Ä–æ—Å
            cursor.execute("""
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'public' AND table_type = 'BASE TABLE'
            """)
            tables = [row['table_name'] if isinstance(row, dict) else row[0] for row in cursor.fetchall()]
        else:
            # SQLite –∑–∞–ø—Ä–æ—Å
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = [row[0] for row in cursor.fetchall()]
            
        logger.info(f"üìã Available tables: {tables}")
        
        if 'channels' not in tables:
            logger.error("‚ùå Table 'channels' does not exist!")
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
            try:
                from .db_adapter import init_database
                logger.info("‚ö° Attempting to create missing tables...")
                init_database()
                logger.info("‚úÖ Tables created successfully")
            except Exception as init_error:
                logger.error(f"‚ùå Failed to create tables: {init_error}")
                raise
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        logger.info("üìà Querying active channels count...")
        if USE_SUPABASE:
            cursor.execute('SELECT COUNT(*) FROM channels WHERE is_active = true')
            active_channels = cursor.fetchone()['count']
            
            cursor.execute('SELECT COUNT(*) FROM channels')
            total_channels = cursor.fetchone()['count']
        else:
            cursor.execute('SELECT COUNT(*) FROM channels WHERE is_active = 1')
            active_channels = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM channels')
            total_channels = cursor.fetchone()[0]
            
        logger.info(f"‚úÖ Active channels: {active_channels}")
        logger.info(f"‚úÖ Total channels: {total_channels}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        yesterday = datetime.now() - timedelta(hours=24)
        
        if USE_SUPABASE:
            cursor.execute('''
                SELECT COUNT(*) FROM run_logs 
                WHERE started_at > %s AND status = 'completed'
            ''', (yesterday.isoformat(),))
            successful_runs = cursor.fetchone()['count']
            
            cursor.execute('''
                SELECT SUM(news_published) FROM run_logs 
                WHERE started_at > %s AND status = 'completed'
            ''', (yesterday.isoformat(),))
            result = cursor.fetchone()
            news_published_24h = result['sum'] if result and result['sum'] else 0
            
            cursor.execute('''
                SELECT SUM(messages_collected) FROM run_logs 
                WHERE started_at > %s AND status = 'completed'
            ''', (yesterday.isoformat(),))
            result = cursor.fetchone()
            messages_collected_24h = result['sum'] if result and result['sum'] else 0
        else:
            cursor.execute('''
                SELECT COUNT(*) FROM run_logs 
                WHERE started_at > ? AND status = 'completed'
            ''', (yesterday.isoformat(),))
            successful_runs = cursor.fetchone()[0]
            
            cursor.execute('''
                SELECT SUM(news_published) FROM run_logs 
                WHERE started_at > ? AND status = 'completed'
            ''', (yesterday.isoformat(),))
            news_published_24h = cursor.fetchone()[0] or 0
            
            cursor.execute('''
                SELECT SUM(messages_collected) FROM run_logs 
                WHERE started_at > ? AND status = 'completed'
            ''', (yesterday.isoformat(),))
            messages_collected_24h = cursor.fetchone()[0] or 0
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫
        cursor.execute('''
            SELECT * FROM run_logs 
            ORDER BY started_at DESC 
            LIMIT 1
        ''')
        last_run = cursor.fetchone()
        last_run = dict(last_run) if last_run else None
        
        return {
            'active_channels': active_channels,
            'total_channels': total_channels,
            'successful_runs_24h': successful_runs,
            'news_published_24h': news_published_24h,
            'messages_collected_24h': messages_collected_24h,
            'last_run': last_run
        }
    finally:
        if conn:
            conn.close()

# –ú–∞—Ä—à—Ä—É—Ç—ã (Routes)

@app.route('/')
def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –¥–∞—à–±–æ—Ä–¥"""
    import logging
    logger = logging.getLogger(__name__)
    
    logger.info("üåê Dashboard route accessed")
    
    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–æ—Å—Ç—É–ø–µ
    try:
        logger.info("üì¶ Setting up database connection...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –∞–¥–∞–ø—Ç–µ—Ä–∞
        try:
            from .db_adapter import init_database, test_db
            logger.info("‚úÖ Database adapter imported via relative import")
        except ImportError:
            from db_adapter import init_database, test_db
            logger.info("‚úÖ Database adapter imported via absolute import")
        
        logger.info(f"üóÑÔ∏è Database type: {db_info['type']}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
        logger.info("üîç Testing database connection...")
        db_exists = test_db()
        logger.info(f"üìä Database test result: {db_exists}")
        
        if not db_exists:
            logger.info("‚ö° Database not initialized, initializing now...")
            init_database()
            logger.info("‚úÖ Database initialization completed")
        else:
            logger.info("‚úÖ Database already initialized")
    
    except Exception as e:
        logger.error(f"‚ùå Database setup error: {e}")
        import traceback
        logger.error(f"üìã Traceback: {traceback.format_exc()}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å stats
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    try:
        logger.info("üìä Getting dashboard stats...")
        stats = get_dashboard_stats()
        logger.info(f"‚úÖ Stats retrieved: {stats}")
    except Exception as e:
        logger.error(f"‚ùå Error getting stats: {e}")
        # Fallback stats
        stats = {
            'active_channels': 0,
            'total_channels': 0,
            'successful_runs_24h': 0,
            'news_published_24h': 0,
            'messages_collected_24h': 0,
            'last_run': None
        }
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
    try:
        logger.info("üìú Getting recent logs...")
        recent_logs = get_run_logs(10)
        logger.info(f"‚úÖ Retrieved {len(recent_logs)} log entries")
    except Exception as e:
        logger.error(f"‚ùå Error getting logs: {e}")
        recent_logs = []
    
    logger.info("üé® Rendering template...")
    return render_template('dashboard.html', 
                         stats=stats, 
                         recent_logs=recent_logs,
                         title="–î–∞—à–±–æ—Ä–¥")

@app.route('/channels')
def channels():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    channels_list = ChannelsDB.get_active_channels()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º
    for channel in channels_list:
        conn = get_db()
        cursor = conn.cursor()
        try:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            week_ago = datetime.now() - timedelta(days=7)
            cursor.execute('''
                SELECT COUNT(*) FROM processed_messages 
                WHERE channel_id = ? AND processed_at > ?
            ''', (channel['id'], week_ago.isoformat()))
            channel['messages_7d'] = cursor.fetchone()[0]
            
            # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            cursor.execute('''
                SELECT processed_at FROM processed_messages 
                WHERE channel_id = ? 
                ORDER BY processed_at DESC 
                LIMIT 1
            ''', (channel['id'],))
            last_message = cursor.fetchone()
            channel['last_message_date'] = last_message[0] if last_message else None
            
        finally:
            conn.close()
    
    return render_template('channels.html', 
                         channels=channels_list,
                         title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏")

@app.route('/channels/add', methods=['GET', 'POST'])
def add_channel():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    if request.method == 'POST':
        username = request.form['username'].strip()
        display_name = request.form['display_name'].strip()
        priority = int(request.form['priority'])
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not username.startswith('@'):
            username = '@' + username
        
        if not username or not display_name:
            flash('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error')
            return render_template('add_channel.html', title="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
        
        if not (0 <= priority <= 10):
            flash('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 10', 'error')
            return render_template('add_channel.html', title="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
        
        try:
            channel_id = ChannelsDB.add_channel(username, display_name, priority)
            flash(f'–ö–∞–Ω–∞–ª {display_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω (ID: {channel_id})', 'success')
            return redirect(url_for('channels'))
        except Exception as e:
            if "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in str(e):
                flash(f'–ö–∞–Ω–∞–ª {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error')
            else:
                flash(f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}', 'error')
    
    return render_template('add_channel.html', title="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")

@app.route('/channels/<int:channel_id>/edit', methods=['GET', 'POST'])
def edit_channel(channel_id):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    conn = get_db()
    cursor = conn.cursor()
    
    if request.method == 'POST':
        display_name = request.form['display_name'].strip()
        priority = int(request.form['priority'])
        is_active = 'is_active' in request.form
        
        if not display_name:
            flash('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'error')
        elif not (0 <= priority <= 10):
            flash('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 10', 'error')
        else:
            try:
                cursor.execute('''
                    UPDATE channels 
                    SET display_name = ?, priority = ?, is_active = ?, updated_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                ''', (display_name, priority, is_active, channel_id))
                conn.commit()
                flash('–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success')
                return redirect(url_for('channels'))
            except Exception as e:
                flash(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}', 'error')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
    cursor.execute('SELECT * FROM channels WHERE id = ?', (channel_id,))
    channel = cursor.fetchone()
    conn.close()
    
    if not channel:
        flash('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('channels'))
    
    return render_template('edit_channel.html', 
                         channel=dict(channel),
                         title=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {channel['display_name']}")

@app.route('/channels/<int:channel_id>/delete', methods=['POST'])
def delete_channel(channel_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    conn = get_db()
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        cursor.execute('SELECT display_name FROM channels WHERE id = ?', (channel_id,))
        channel = cursor.fetchone()
        
        if not channel:
            flash('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        else:
            # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            cursor.execute('DELETE FROM processed_messages WHERE channel_id = ?', (channel_id,))
            cursor.execute('DELETE FROM channels WHERE id = ?', (channel_id,))
            conn.commit()
            
            flash(f'–ö–∞–Ω–∞–ª "{channel[0]}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success')
    
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}', 'error')
    finally:
        conn.close()
    
    return redirect(url_for('channels'))

@app.route('/settings')
def settings():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    conn = get_db()
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT * FROM settings ORDER BY key')
        settings_list = [dict(row) for row in cursor.fetchall()]
    finally:
        conn.close()
    
    return render_template('settings.html', 
                         settings=settings_list,
                         title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")

@app.route('/settings/update', methods=['POST'])
def update_settings():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        for key, value in request.form.items():
            if key.startswith('setting_'):
                setting_key = key.replace('setting_', '')
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                if setting_key == 'max_news_count':
                    if not (1 <= int(value) <= 50):
                        flash('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50', 'error')
                        return redirect(url_for('settings'))
                
                elif setting_key == 'hours_lookback':
                    if not (1 <= int(value) <= 168):  # –î–æ –Ω–µ–¥–µ–ª–∏
                        flash('–ü–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 168 —á–∞—Å–æ–≤', 'error')
                        return redirect(url_for('settings'))
                
                SettingsDB.set_setting(setting_key, value)
        
        flash('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success')
        
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}', 'error')
    
    return redirect(url_for('settings'))

@app.route('/logs')
def logs():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–æ–≤ –∑–∞–ø—É—Å–∫–æ–≤"""
    page = request.args.get('page', 1, type=int)
    per_page = 20
    
    conn = get_db()
    cursor = conn.cursor()
    try:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute('SELECT COUNT(*) FROM run_logs')
        total_logs = cursor.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        offset = (page - 1) * per_page
        cursor.execute('''
            SELECT * FROM run_logs 
            ORDER BY started_at DESC 
            LIMIT ? OFFSET ?
        ''', (per_page, offset))
        
        logs = [dict(row) for row in cursor.fetchall()]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        total_pages = (total_logs + per_page - 1) // per_page
        has_prev = page > 1
        has_next = page < total_pages
        
    finally:
        conn.close()
    
    return render_template('logs.html',
                         logs=logs,
                         page=page,
                         total_pages=total_pages,
                         has_prev=has_prev,
                         has_next=has_next,
                         title="–õ–æ–≥–∏ –∑–∞–ø—É—Å–∫–æ–≤")

@app.route('/run-collect', methods=['POST'])
def run_collect():
    """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∞–¥–º–∏–Ω–∫–∏"""
    import logging
    import asyncio
    import signal
    from concurrent.futures import ThreadPoolExecutor, TimeoutError as FuturesTimeoutError
    
    logger = logging.getLogger(__name__)
    
    def timeout_handler(signum, frame):
        raise TimeoutError("Operation timed out")
    
    try:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∞–¥–º–∏–Ω–∫–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_env_vars = ['TELEGRAM_API_ID', 'TELEGRAM_API_HASH', 'TELEGRAM_BOT_TOKEN', 'ANTHROPIC_API_KEY']
        missing_vars = []
        
        for var in required_env_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            error_msg = f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {", ".join(missing_vars)}'
            logger.error(error_msg)
            flash(error_msg, 'error')
            return redirect(url_for('dashboard'))
        
        logger.info("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
        
        try:
            from .news_collector import NewsCollector
            logger.info("‚úÖ NewsCollector –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç")
        except ImportError:
            from news_collector import NewsCollector
            logger.info("‚úÖ NewsCollector –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç")
        
        logger.info("üîÑ –°–æ–∑–¥–∞–µ–º NewsCollector –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª...")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_news_collection():
            try:
                collector = NewsCollector()
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    result = loop.run_until_complete(collector.run_full_cycle())
                    return result
                finally:
                    loop.close()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_news_collection: {e}")
                import traceback
                logger.error(f"Traceback: {traceback.format_exc()}")
                return {"success": False, "error": str(e)}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º 5 –º–∏–Ω—É—Ç
        logger.info("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ç–∞–π–º–∞—É—Ç–æ–º 5 –º–∏–Ω—É—Ç...")
        
        with ThreadPoolExecutor(max_workers=1) as executor:
            future = executor.submit(run_news_collection)
            try:
                result = future.result(timeout=300)  # 5 –º–∏–Ω—É—Ç
                logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result}")
            except FuturesTimeoutError:
                logger.error("‚ùå –¢–∞–π–º–∞—É—Ç: —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–Ω—è–ª –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç")
                future.cancel()
                flash('–¢–∞–π–º–∞—É—Ç: —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error')
                return redirect(url_for('dashboard'))
        
        if result.get('success'):
            success_msg = (f'–°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! '
                          f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.get("channels_processed", 0)} –∫–∞–Ω–∞–ª–æ–≤, '
                          f'–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {result.get("news_published", 0)} –Ω–æ–≤–æ—Å—Ç–µ–π')
            logger.info(f"‚úÖ {success_msg}")
            flash(success_msg, 'success')
        else:
            error_msg = f'–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}'
            logger.error(f"‚ùå {error_msg}")
            flash(error_msg, 'error')
    
    except Exception as e:
        import traceback
        error_details = traceback.format_exc()
        error_msg = f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞: {str(e)}'
        logger.error(f"‚ùå {error_msg}")
        logger.error(f"üìã –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{error_details}")
        flash(error_msg, 'error')
    
    return redirect(url_for('dashboard'))

# API endpoints –¥–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
@app.route('/api/stats')
def api_stats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats = get_dashboard_stats()
    return jsonify(stats)

@app.route('/api/channels')
def api_channels():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    channels_list = ChannelsDB.get_active_channels()
    return jsonify(channels_list)

# Health check endpoint –¥–ª—è Railway
@app.route('/health')
def health():
    """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_info = get_database_info()
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        basic_info = {
            'status': 'ok',
            'database_type': db_info['type'],
            'database_persistent': db_info.get('persistent', False),
            'railway_compatible': db_info.get('railway_compatible', False),
            'is_railway': bool(os.getenv('RAILWAY_ENVIRONMENT')),
            'timestamp': datetime.now().isoformat()
        }
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            conn = get_db()
            if USE_SUPABASE:
                # PostgreSQL –ø—Ä–æ–≤–µ—Ä–∫–∞
                cursor = conn.cursor()
                cursor.execute('SELECT COUNT(*) FROM channels')
                result = cursor.fetchone()
                channels_count = result['count'] if isinstance(result, dict) else result[0]
            else:
                # SQLite –ø—Ä–æ–≤–µ—Ä–∫–∞
                cursor = conn.cursor()
                cursor.execute('SELECT COUNT(*) FROM channels')
                channels_count = cursor.fetchone()[0]
                conn.close()
            
            basic_info.update({
                'database': 'connected',
                'channels_count': channels_count
            })
            
        except Exception as db_error:
            basic_info.update({
                'database': f'error: {str(db_error)}',
                'channels_count': 0
            })
        
        return jsonify(basic_info)
    
    except Exception as e:
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π error response —á—Ç–æ–±—ã –Ω–µ –∫—Ä–∞—à–∏—Ç—å health check
        return jsonify({
            'status': 'error',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 200  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑–≤–∞—Ç—å —Ä–µ—Å—Ç–∞—Ä—Ç

# –°–æ–∑–¥–∞–Ω–∏–µ HTML —à–∞–±–ª–æ–Ω–æ–≤
def create_templates():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ HTML —à–∞–±–ª–æ–Ω–æ–≤"""
    template_dir = os.path.join(os.path.dirname(__file__), '..', 'templates')
    os.makedirs(template_dir, exist_ok=True)
    
    # Base template
    base_template = '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}EdTech News Digest - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-light">
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="fas fa-robot"></i> EdTech News Bot
            </a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="/"><i class="fas fa-tachometer-alt"></i> –î–∞—à–±–æ—Ä–¥</a>
                <a class="nav-link" href="/channels"><i class="fas fa-list"></i> –ö–∞–Ω–∞–ª—ã</a>
                <a class="nav-link" href="/settings"><i class="fas fa-cog"></i> –ù–∞—Å—Ç—Ä–æ–π–∫–∏</a>
                <a class="nav-link" href="/logs"><i class="fas fa-file-text"></i> –õ–æ–≥–∏</a>
            </div>
        </div>
    </nav>
    
    <div class="container mt-4">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'error' else 'success' }} alert-dismissible fade show">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        
        {% block content %}{% endblock %}
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    {% block scripts %}{% endblock %}
</body>
</html>'''
    
    with open(os.path.join(template_dir, 'base.html'), 'w', encoding='utf-8') as f:
        f.write(base_template)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    create_templates()
    
    print("üåê Flask –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞!")
    print(f"üìç –ê–¥—Ä–µ—Å: http://localhost:{FLASK_PORT}")
    print("üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    print("   - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)")
    print("   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    print("   - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∑–∞–ø—É—Å–∫–æ–≤")
    print("   - –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
    print("   - API endpoints")
    print("   - Health check")
    
    app.run(host='0.0.0.0', port=FLASK_PORT, debug=False)
else:
    # –ü—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã
    create_templates()