#!/usr/bin/env python3
"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å) –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è EdTech News Digest Bot
–¢–û–õ–¨–ö–û SUPABASE - –ë–ï–ó SQLite FALLBACK
"""

import os
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional

from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
from flask import session as flask_session

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/admin.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)
logger.info("üöÄ Starting Admin Panel - SUPABASE ONLY MODE")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –º–æ–¥—É–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    logger.info("üì¶ Attempting relative import...")
    from .database import (
        ChannelsDB, SettingsDB, ProcessedMessagesDB, PendingNewsDB,
        create_connection, test_db, init_database, get_database_info
    )
    from .config import FLASK_SECRET_KEY, FLASK_PORT, TARGET_CHANNEL
    logger.info("‚úÖ Relative import successful")
except ImportError:
    logger.info("üì¶ Falling back to absolute import...")
    from database import (
        ChannelsDB, SettingsDB, ProcessedMessagesDB, PendingNewsDB,
        create_connection, test_db, init_database, get_database_info
    )
    from config import FLASK_SECRET_KEY, FLASK_PORT, TARGET_CHANNEL
    logger.info("‚úÖ Absolute import successful")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
logger.info("üåê Initializing Flask application...")
app = Flask(__name__)
app.secret_key = FLASK_SECRET_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–ø–∫–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
template_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'templates')
app.template_folder = template_dir
logger.info(f"üìÅ Template directory: {template_dir}")
logger.info("‚úÖ Flask app initialized")

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
logger.info("üîç Getting database information...")
db_info = get_database_info()
logger.info(f"üóÑÔ∏è Database configuration: {db_info}")
print(f"üóÑÔ∏è Database configuration: {db_info['type']}")

def get_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    return create_connection()

def get_dashboard_stats_rest_api():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ REST API (fallback)"""
    logger.info("üì° Getting dashboard statistics via REST API...")
    
    try:
        from .database import supabase_db
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã
        channels = supabase_db.execute_rest_query('channels', 'GET')
        active_channels = len([c for c in channels if c.get('is_active', True)])
        total_channels = len(channels)
        
        # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, —Ç–∞–∫ –∫–∞–∫ —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
        try:
            messages = supabase_db.execute_rest_query('processed_messages', 'GET')
            recent_messages = len(messages)  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ - –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        except:
            recent_messages = 0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
        published_news = 0
        last_run = None
        
        stats = {
            'active_channels': active_channels,
            'total_channels': total_channels,
            'recent_messages': recent_messages,
            'published_news': published_news,
            'last_run': last_run
        }
        
        logger.info(f"‚úÖ REST API statistics: active={active_channels}, total={total_channels}")
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå REST API fallback failed: {e}")
        return {
            'active_channels': 0,
            'total_channels': 0,
            'recent_messages': 0,
            'published_news': 0,
            'last_run': None,
            'error': f'REST API error: {str(e)}'
        }

def get_dashboard_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    logger.info("üìä Getting dashboard statistics...")
    
    conn = None
    try:
        logger.info("üîó Getting database connection...")
        conn = get_db()
        
        if conn is None:
            logger.warning("‚ö†Ô∏è PostgreSQL connection unavailable, using REST API fallback...")
            return get_dashboard_stats_rest_api()
            
        cursor = conn.cursor()
        logger.info("‚úÖ Database connection established")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        logger.info("üîç Checking if tables exist...")
        cursor.execute("""
            SELECT table_name FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_type = 'BASE TABLE'
        """)
        tables = [row['table_name'] if isinstance(row, dict) else row[0] for row in cursor.fetchall()]
        logger.info(f"üìã Available tables: {tables}")
        
        if 'channels' not in tables:
            logger.error("‚ùå Table 'channels' does not exist!")
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
            try:
                logger.info("‚ö° Attempting to create missing tables...")
                init_database()
                logger.info("‚úÖ Tables created successfully")
            except Exception as init_error:
                logger.error(f"‚ùå Failed to create tables: {init_error}")
                raise
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        logger.info("üìà Querying active channels count...")
        cursor.execute('SELECT COUNT(*) FROM channels WHERE is_active = true')
        result = cursor.fetchone()
        active_channels = result['count'] if isinstance(result, dict) else result[0]
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        cursor.execute('SELECT COUNT(*) FROM channels')
        result = cursor.fetchone()
        total_channels = result['count'] if isinstance(result, dict) else result[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        cursor.execute('''
            SELECT COUNT(*) FROM processed_messages 
            WHERE processed_at > CURRENT_TIMESTAMP - INTERVAL '24 hours'
        ''')
        result = cursor.fetchone()
        recent_messages = result['count'] if isinstance(result, dict) else result[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        cursor.execute('''
            SELECT COUNT(*) FROM processed_messages 
            WHERE published = true AND processed_at > CURRENT_TIMESTAMP - INTERVAL '24 hours'
        ''')
        result = cursor.fetchone()
        published_news = result['count'] if isinstance(result, dict) else result[0]
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫
        cursor.execute('SELECT * FROM run_logs ORDER BY started_at DESC LIMIT 1')
        last_run = cursor.fetchone()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        cursor.execute('''
            SELECT COUNT(*) FROM run_logs 
            WHERE status = 'completed' AND started_at > CURRENT_TIMESTAMP - INTERVAL '24 hours'
        ''')
        result = cursor.fetchone()
        successful_runs_24h = result['count'] if isinstance(result, dict) else result[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏–∑ run_logs
        cursor.execute('''
            SELECT COALESCE(SUM(news_published), 0) as total FROM run_logs 
            WHERE status = 'completed' AND started_at > CURRENT_TIMESTAMP - INTERVAL '24 hours'
        ''')
        result = cursor.fetchone()
        news_published_24h = result['total'] if isinstance(result, dict) else result[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏–∑ run_logs
        cursor.execute('''
            SELECT COALESCE(SUM(messages_collected), 0) as total FROM run_logs 
            WHERE started_at > CURRENT_TIMESTAMP - INTERVAL '24 hours'
        ''')
        result = cursor.fetchone()
        messages_collected_24h = result['total'] if isinstance(result, dict) else result[0]
        
        stats = {
            'active_channels': active_channels,
            'total_channels': total_channels,
            'recent_messages': recent_messages,
            'published_news': published_news,
            'successful_runs_24h': successful_runs_24h,
            'news_published_24h': news_published_24h,
            'messages_collected_24h': messages_collected_24h,
            'last_run': dict(last_run) if last_run else None
        }
        
        logger.info(f"üìä Dashboard stats: {stats}")
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå Error getting dashboard stats: {e}")
        import traceback
        logger.error(f"üìã Traceback: {traceback.format_exc()}")
        return {
            'active_channels': 0,
            'total_channels': 0,
            'recent_messages': 0,
            'published_news': 0,
            'last_run': None,
            'error': str(e)
        }

# –ú–∞—Ä—à—Ä—É—Ç—ã (Routes)

@app.route('/')
def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –¥–∞—à–±–æ—Ä–¥"""
    logger.info("üåê Dashboard route accessed")
    
    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–æ—Å—Ç—É–ø–µ
    try:
        logger.info("üì¶ Setting up database connection...")
        logger.info(f"üóÑÔ∏è Database type: {db_info['type']}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
        logger.info("üîç Testing database connection...")
        db_exists = test_db()
        logger.info(f"üìä Database test result: {db_exists}")
        
        if not db_exists:
            logger.info("‚ö° Database not initialized, initializing now...")
            init_database()
            logger.info("‚úÖ Database initialization completed")
        else:
            logger.info("‚úÖ Database already initialized")
    
    except Exception as e:
        logger.error(f"‚ùå Database setup error: {e}")
        import traceback
        logger.error(f"üìã Traceback: {traceback.format_exc()}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å stats
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    try:
        logger.info("üìä Getting dashboard statistics...")
        stats = get_dashboard_stats()
        logger.info("‚úÖ Dashboard statistics retrieved")
    except Exception as e:
        logger.error(f"‚ùå Error getting dashboard stats: {e}")
        stats = {
            'active_channels': 0,
            'total_channels': 0,
            'recent_messages': 0,
            'published_news': 0,
            'last_run': None,
            'error': str(e)
        }
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∫–∞–Ω–∞–ª—ã
    try:
        logger.info("üì∫ Getting top channels...")
        channels = ChannelsDB.get_active_channels()[:5]  # –¢–æ–ø 5 –∫–∞–Ω–∞–ª–æ–≤
        logger.info(f"‚úÖ Retrieved {len(channels)} top channels")
    except Exception as e:
        logger.error(f"‚ùå Error getting channels: {e}")
        channels = []
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    try:
        logger.info("‚öôÔ∏è Getting current settings...")
        current_settings = {
            'max_news_count': SettingsDB.get_setting('max_news_count', '7'),
            'target_channel': SettingsDB.get_setting('target_channel', TARGET_CHANNEL),
            'digest_times': SettingsDB.get_setting('digest_times', '12:00,18:00'),
            'hours_lookback': SettingsDB.get_setting('hours_lookback', '12')
        }
        logger.info("‚úÖ Current settings retrieved")
    except Exception as e:
        logger.error(f"‚ùå Error getting settings: {e}")
        current_settings = {
            'max_news_count': '7',
            'target_channel': TARGET_CHANNEL,
            'digest_times': '12:00,18:00',
            'hours_lookback': '12'
        }
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏ –¥–ª—è –±–ª–æ–∫–∞ "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏"
    recent_logs = []
    try:
        logger.info("üìú Getting recent run logs...")
        conn = get_db()
        if conn is not None:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM run_logs 
                ORDER BY started_at DESC 
                LIMIT 10
            ''')
            recent_logs = [dict(row) for row in cursor.fetchall()]
            logger.info(f"‚úÖ Retrieved {len(recent_logs)} recent logs")
        else:
            logger.warning("‚ö†Ô∏è No PostgreSQL connection, using REST API fallback for logs...")
            try:
                from .database import supabase_db
                logs_data = supabase_db.execute_rest_query('run_logs', 'GET')
                if logs_data:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ started_at –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                    sorted_logs = sorted(logs_data, key=lambda x: x.get('started_at', ''), reverse=True)
                    recent_logs = sorted_logs[:10]
                    logger.info(f"‚úÖ Retrieved {len(recent_logs)} recent logs via REST API")
                else:
                    logger.warning("‚ö†Ô∏è No logs data from REST API")
            except Exception as api_error:
                logger.error(f"‚ùå REST API fallback for logs failed: {api_error}")
    except Exception as e:
        logger.error(f"‚ùå Error getting recent logs: {e}")
        recent_logs = []
    
    logger.info("‚úÖ Dashboard data prepared, rendering template")
    
    return render_template('dashboard.html',
                         stats=stats,
                         channels=channels,
                         settings=current_settings,
                         db_info=db_info,
                         recent_logs=recent_logs)

@app.route('/channels')
def channels():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    logger.info("üì∫ Channels page accessed")
    
    try:
        channels_list = ChannelsDB.get_active_channels()
        logger.info(f"‚úÖ Retrieved {len(channels_list)} channels")
    except Exception as e:
        logger.error(f"‚ùå Error getting channels: {e}")
        channels_list = []
        flash(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}', 'error')
    
    return render_template('channels.html', channels=channels_list)

@app.route('/channels/add')
def add_channel_form():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    logger.info("‚ûï Add channel form accessed")
    return render_template('add_channel.html')

@app.route('/add_channel', methods=['POST'])
def add_channel():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    logger.info("‚ûï Add channel request received")
    
    username = request.form.get('username', '').strip()
    display_name = request.form.get('display_name', '').strip()
    priority = request.form.get('priority', 0, type=int)
    
    logger.info(f"üìã Channel data: {username}, {display_name}, priority={priority}")
    
    if not username:
        flash('–ò–º—è –∫–∞–Ω–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ', 'error')
        return redirect(url_for('channels'))
    
    # –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if not username.startswith('@'):
        username = '@' + username
    
    try:
        channel_id = ChannelsDB.add_channel(username, display_name, priority)
        flash(f'–ö–∞–Ω–∞–ª {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω (ID: {channel_id})', 'success')
        logger.info(f"‚úÖ Channel {username} added successfully with ID {channel_id}")
    except ValueError as e:
        flash(str(e), 'error')
        logger.warning(f"‚ö†Ô∏è Channel addition failed: {e}")
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}', 'error')
        logger.error(f"‚ùå Channel addition error: {e}")
    
    return redirect(url_for('channels'))

@app.route('/test')
def test_route():
    """–¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    return "Test route works!"

@app.route('/channels/<int:channel_id>/edit')
def edit_channel_form(channel_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    logger.info(f"‚úèÔ∏è Edit channel form accessed for ID: {channel_id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
        channels = ChannelsDB.get_active_channels()
        channel = None
        for ch in channels:
            if ch.get('id') == channel_id:
                channel = ch
                break
        
        if not channel:
            flash('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('channels'))
        
        logger.info(f"‚úÖ Channel {channel_id} found for editing")
        return render_template('edit_channel.html', channel=channel)
        
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞: {e}', 'error')
        logger.error(f"‚ùå Error getting channel {channel_id}: {e}")
        return redirect(url_for('channels'))

@app.route('/channels/<int:channel_id>/update', methods=['POST'])
def update_channel(channel_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    logger.info(f"‚úèÔ∏è Update channel request received for ID: {channel_id}")
    
    username = request.form.get('username', '').strip()
    display_name = request.form.get('display_name', '').strip()
    priority = request.form.get('priority', 0, type=int)
    is_active = 'is_active' in request.form
    
    logger.info(f"üìã Channel update data: {username}, {display_name}, priority={priority}, active={is_active}")
    
    if not username:
        flash('–ò–º—è –∫–∞–Ω–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ', 'error')
        return redirect(url_for('edit_channel_form', channel_id=channel_id))
    
    # –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if not username.startswith('@'):
        username = '@' + username
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
        result = ChannelsDB.update_channel(channel_id, username, display_name, priority, is_active)
        if result:
            flash('–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success')
            logger.info(f"‚úÖ Channel {channel_id} updated successfully")
        else:
            flash('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞', 'error')
            logger.error(f"‚ùå Failed to update channel {channel_id}")
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}', 'error')
        logger.error(f"‚ùå Channel update error: {e}")
    
    return redirect(url_for('channels'))

@app.route('/channels/<int:channel_id>/delete', methods=['POST', 'GET'])
def delete_channel(channel_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    logger.info(f"üóëÔ∏è Delete channel request received for ID: {channel_id}")
    
    try:
        # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ REST API –∏–ª–∏ PostgreSQL
        result = ChannelsDB.delete_channel(channel_id)
        if result:
            flash('–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success')
            logger.info(f"‚úÖ Channel {channel_id} deleted successfully")
        else:
            flash('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞', 'error')
            logger.error(f"‚ùå Failed to delete channel {channel_id}")
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}', 'error')
        logger.error(f"‚ùå Channel deletion error: {e}")
    
    return redirect(url_for('channels'))

@app.route('/channels/<int:channel_id>/toggle', methods=['POST', 'GET'])
def toggle_channel(channel_id):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    logger.info(f"üîÑ Toggle channel request received for ID: {channel_id}")
    
    try:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞
        result = ChannelsDB.toggle_channel_status(channel_id)
        if result:
            flash('–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω', 'success')
            logger.info(f"‚úÖ Channel {channel_id} status toggled successfully")
        else:
            flash('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞', 'error')
            logger.error(f"‚ùå Failed to toggle channel {channel_id}")
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}', 'error')
        logger.error(f"‚ùå Channel toggle error: {e}")
    
    return redirect(url_for('channels'))

@app.route('/settings')
def settings():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    logger.info("‚öôÔ∏è Settings page accessed")
    
    try:
        current_settings = {
            'max_news_count': SettingsDB.get_setting('max_news_count', '7'),
            'target_channel': SettingsDB.get_setting('target_channel', TARGET_CHANNEL),
            'digest_times': SettingsDB.get_setting('digest_times', '12:00,18:00'),
            'hours_lookback': SettingsDB.get_setting('hours_lookback', '12'),
            'summary_max_length': SettingsDB.get_setting('summary_max_length', '150')
        }
        logger.info("‚úÖ Current settings retrieved")
    except Exception as e:
        logger.error(f"‚ùå Error getting settings: {e}")
        current_settings = {}
        flash(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}', 'error')
    
    return render_template('settings.html', settings=current_settings)

@app.route('/update_settings', methods=['POST'])
def update_settings():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    logger.info("üîß Update settings request received")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        max_news_count = request.form.get('max_news_count', '7')
        target_channel = request.form.get('target_channel', TARGET_CHANNEL)
        digest_times = request.form.get('digest_times', '12:00,18:00')
        hours_lookback = request.form.get('hours_lookback', '12')
        summary_max_length = request.form.get('summary_max_length', '150')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        SettingsDB.set_setting('max_news_count', max_news_count, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ')
        SettingsDB.set_setting('target_channel', target_channel, '–¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')
        SettingsDB.set_setting('digest_times', digest_times, '–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤')
        SettingsDB.set_setting('hours_lookback', hours_lookback, '–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏')
        SettingsDB.set_setting('summary_max_length', summary_max_length, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏')
        
        flash('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success')
        logger.info("‚úÖ Settings updated successfully")
        
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}', 'error')
        logger.error(f"‚ùå Settings update error: {e}")
    
    return redirect(url_for('settings'))

@app.route('/pending-news')
def pending_news():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    logger.info("üì∞ Pending news page accessed")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        pending = PendingNewsDB.get_pending_news()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ —Ç–∏–ø—É –¥–∞–π–¥–∂–µ—Å—Ç–∞
        grouped_news = {}
        for news in pending:
            key = f"{news.get('scheduled_for', 'Unknown')} - {news.get('digest_type', 'Unknown')}"
            if key not in grouped_news:
                grouped_news[key] = []
            grouped_news[key].append(news)
        
        logger.info(f"‚úÖ Retrieved {len(pending)} pending news items")
        
    except Exception as e:
        logger.error(f"‚ùå Error getting pending news: {e}")
        grouped_news = {}
        flash(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {e}', 'error')
    
    return render_template('pending_news.html', grouped_news=grouped_news)

@app.route('/pending-news/<int:news_id>/delete', methods=['POST'])
def delete_pending_news(news_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏"""
    logger.info(f"üóëÔ∏è Delete pending news request for ID: {news_id}")
    
    try:
        result = PendingNewsDB.delete_pending_news(news_id)
        if result:
            flash('–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏', 'success')
            logger.info(f"‚úÖ Pending news {news_id} deleted successfully")
        else:
            flash('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏', 'error')
            logger.error(f"‚ùå Failed to delete pending news {news_id}")
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}', 'error')
        logger.error(f"‚ùå Error deleting pending news: {e}")
    
    return redirect(url_for('pending_news'))

@app.route('/create-pending-table', methods=['POST'])
def create_pending_table():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã pending_news –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    logger.info("üîß Creating pending_news table requested")
    
    try:
        conn = get_db()
        if conn is None:
            flash("‚ùå PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ Supabase SQL Editor", 'error')
            return redirect(url_for('pending_news'))
            
        cursor = conn.cursor()
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã pending_news
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS pending_news (
                id SERIAL PRIMARY KEY,
                channel_id INTEGER NOT NULL REFERENCES channels(id) ON DELETE CASCADE,
                message_id BIGINT NOT NULL,
                channel_name TEXT NOT NULL,
                message_text TEXT NOT NULL,
                summary TEXT NOT NULL,
                relevance_score INTEGER DEFAULT 5,
                collected_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                scheduled_for DATE,
                digest_type VARCHAR(20),
                is_approved BOOLEAN DEFAULT true,
                is_deleted BOOLEAN DEFAULT false,
                UNIQUE(channel_id, message_id)
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_pending_news_scheduled_for ON pending_news(scheduled_for)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_pending_news_digest_type ON pending_news(digest_type)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_pending_news_is_deleted ON pending_news(is_deleted)')
        
        conn.commit()
        flash("‚úÖ –¢–∞–±–ª–∏—Ü–∞ pending_news —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", 'success')
        logger.info("‚úÖ pending_news table created successfully")
        
    except Exception as e:
        flash(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {str(e)}", 'error')
        logger.error(f"‚ùå Error creating pending_news table: {e}")
    
    return redirect(url_for('pending_news'))

@app.route('/publish-digest', methods=['POST'])
def publish_digest():
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    logger.info("üì§ Manual digest publication requested")
    
    try:
        import asyncio
        from src.news_collector import NewsCollector
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            collector = NewsCollector()
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            loop.run_until_complete(collector.initialize())
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
            result = loop.run_until_complete(collector.publish_accumulated_digest())
            
            if result['success']:
                flash(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! –ù–æ–≤–æ—Å—Ç–µ–π: {result.get('news_count', 0)}", 'success')
                logger.info(f"‚úÖ Manual digest published: {result.get('news_count', 0)} news")
            else:
                flash(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {result.get('error', 'Unknown')}", 'error')
                logger.error(f"‚ùå Manual digest publication failed: {result.get('error', 'Unknown')}")
                
        finally:
            loop.close()
            
    except Exception as e:
        flash(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", 'error')
        logger.error(f"‚ùå Critical error in manual digest publication: {e}")
    
    return redirect(url_for('pending_news'))

@app.route('/logs')
def logs():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–æ–≤"""
    logger.info("üìã Logs page accessed")
    
    try:
        conn = get_db()
        if conn is None:
            logger.warning("‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º REST API fallback –¥–ª—è –ª–æ–≥–æ–≤")
            try:
                from .database import supabase_db
                logs_data = supabase_db.execute_rest_query('run_logs', 'GET')
                if logs_data:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ started_at –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50
                    sorted_logs = sorted(logs_data, key=lambda x: x.get('started_at', ''), reverse=True)
                    run_logs = sorted_logs[:50]
                    logger.info(f"‚úÖ Retrieved {len(run_logs)} log entries via REST API")
                else:
                    run_logs = []
                    flash('–õ–æ–≥–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 'info')
            except Exception as api_error:
                logger.error(f"‚ùå REST API fallback for logs failed: {api_error}")
                run_logs = []
                flash('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ REST API', 'error')
        else:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏
            cursor.execute('''
                SELECT * FROM run_logs 
                ORDER BY started_at DESC 
                LIMIT 50
            ''')
            run_logs = [dict(row) for row in cursor.fetchall()]
            
            logger.info(f"‚úÖ Retrieved {len(run_logs)} log entries")
        
    except Exception as e:
        logger.error(f"‚ùå Error getting logs: {e}")
        run_logs = []
        flash(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}', 'error')
    
    return render_template('logs.html', logs=run_logs)

# API endpoint for stats (for frontend auto-refresh)
@app.route('/api/stats')
def api_stats():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        stats = get_dashboard_stats()
        return jsonify({
            'status': 'ok',
            'active_channels': stats.get('active_channels', 0),
            'total_channels': stats.get('total_channels', 0),
            'messages_today': stats.get('messages_today', 0),
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        logger.error(f"‚ùå Error in /api/stats: {e}")
        return jsonify({
            'status': 'error',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

# Health check endpoint –¥–ª—è Railway
@app.route('/health')
def health():
    """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_info = get_database_info()
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        basic_info = {
            'status': 'ok',
            'database_type': db_info['type'],
            'database_persistent': db_info.get('persistent', False),
            'railway_compatible': db_info.get('railway_compatible', False),
            'is_railway': bool(os.getenv('RAILWAY_ENVIRONMENT')),
            'timestamp': datetime.now().isoformat()
        }
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            conn = get_db()
            if conn is None:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API fallback
                from .database import supabase_db
                channels_data = supabase_db.execute_rest_query('channels', 'GET')
                channels_count = len(channels_data) if channels_data else 0
            else:
                cursor = conn.cursor()
                cursor.execute('SELECT COUNT(*) FROM channels')
                result = cursor.fetchone()
                channels_count = result['count'] if isinstance(result, dict) else result[0]
            
            basic_info.update({
                'database': 'connected',
                'database_exists': True,
                'channels_count': channels_count
            })
            
        except Exception as db_error:
            basic_info.update({
                'database': f'error: {str(db_error)}',
                'database_exists': False,
                'channels_count': 0
            })
        
        return jsonify(basic_info)
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/run-collect', methods=['GET', 'POST'])
def run_collect():
    """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
    
    try:
        import asyncio
        import sys
        import os
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ main.py
        main_path = os.path.join(os.path.dirname(os.path.dirname(__file__)))
        if main_path not in sys.path:
            sys.path.append(main_path)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ main.py
        from main import run_collect as main_run_collect
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            result_code = loop.run_until_complete(main_run_collect())
            
            if result_code == 0:
                flash("‚úÖ –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!", "success")
                logger.info("‚úÖ –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                flash("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", "error")
                logger.error("‚ùå –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                
        finally:
            loop.close()
        
    except ImportError as ie:
        error_msg = f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(ie)}"
        logger.error(f"‚ùå {error_msg}")
        flash(f"‚ùå {error_msg}", "error")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        flash(f"‚ùå {error_msg}", "error")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return redirect(url_for('dashboard'))

if __name__ == '__main__':
    logger.info(f"üöÄ Starting Flask development server on port {FLASK_PORT}")
    app.run(host='0.0.0.0', port=FLASK_PORT, debug=True)