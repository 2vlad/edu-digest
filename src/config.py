import os
import logging
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/config.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)
logger.info("üöÄ Loading EdTech News Digest configuration...")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_file_path = os.path.join(os.path.dirname(__file__), '..', '.env')
logger.debug(f"üìÅ Looking for .env file at: {env_file_path}")

if os.path.exists(env_file_path):
    logger.info("‚úÖ .env file found, loading variables")
    load_dotenv()
else:
    logger.info("‚ÑπÔ∏è No .env file found, using system environment variables only")
    load_dotenv()  # Still call to load from system env

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
environment = os.getenv('RAILWAY_ENVIRONMENT', 'local')
logger.info(f"üåç Environment: {environment}")
logger.debug(f"üêç Python working directory: {os.getcwd()}")

# Telegram API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
logger.info("üîß Loading Telegram API configuration...")
TELEGRAM_API_ID = os.getenv('TELEGRAM_API_ID')
TELEGRAM_API_HASH = os.getenv('TELEGRAM_API_HASH')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TARGET_CHANNEL = os.getenv('TARGET_CHANNEL', '@vestnik_edtech')

# –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å Telegram –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
logger.debug("üì± Telegram API variables:")
logger.debug(f"   TELEGRAM_API_ID: {'‚úÖ Set' if TELEGRAM_API_ID else '‚ùå Missing'}")
logger.debug(f"   TELEGRAM_API_HASH: {'‚úÖ Set' if TELEGRAM_API_HASH else '‚ùå Missing'}")
logger.debug(f"   TELEGRAM_BOT_TOKEN: {'‚úÖ Set' if TELEGRAM_BOT_TOKEN else '‚ùå Missing'}")
logger.debug(f"   TARGET_CHANNEL: {TARGET_CHANNEL}")

if not TELEGRAM_API_ID or not TELEGRAM_API_HASH:
    logger.warning("‚ö†Ô∏è Telegram API credentials missing - real channel reading will fail")
    logger.warning("üí° Get credentials from https://my.telegram.org/auth")
    
if not TELEGRAM_BOT_TOKEN:
    logger.warning("‚ö†Ô∏è Telegram Bot Token missing - publishing will fail")
    logger.warning("üí° Get bot token from @BotFather")

# Claude API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
logger.info("ü§ñ Loading Claude AI API configuration...")
ANTHROPIC_API_KEY = os.getenv('ANTHROPIC_API_KEY')
logger.debug(f"   ANTHROPIC_API_KEY: {'‚úÖ Set' if ANTHROPIC_API_KEY else '‚ùå Missing'}")

if not ANTHROPIC_API_KEY:
    logger.warning("‚ö†Ô∏è Claude API key missing - AI summarization will fail")
    logger.warning("üí° Get API key from https://console.anthropic.com/")

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - Supabase (PostgreSQL)
logger.info("üêò Loading Supabase/PostgreSQL configuration...")
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_ANON_KEY')  # Anon/Public API Key
SUPABASE_SERVICE_KEY = os.getenv('SUPABASE_SERVICE_KEY')  # Service Role Key (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
DATABASE_URL = os.getenv('DATABASE_URL')  # PostgreSQL connection string

# –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å Database –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö  
logger.debug("üóÑÔ∏è Database configuration:")
logger.debug(f"   DATABASE_URL: {'‚úÖ Set' if DATABASE_URL else '‚ùå Missing'}")
logger.debug(f"   SUPABASE_URL: {'‚úÖ Set' if SUPABASE_URL else '‚ùå Missing'}")
logger.debug(f"   SUPABASE_ANON_KEY: {'‚úÖ Set' if SUPABASE_KEY else '‚ùå Missing'}")
logger.debug(f"   SUPABASE_SERVICE_KEY: {'‚úÖ Set' if SUPABASE_SERVICE_KEY else '‚ùå Missing'}")

if DATABASE_URL:
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º DATABASE_URL (—Å–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å)
    safe_db_url = DATABASE_URL[:20] + "***" + DATABASE_URL[-20:] if len(DATABASE_URL) > 40 else "***"
    logger.info(f"‚úÖ PostgreSQL connection string configured: {safe_db_url}")
else:
    logger.warning("‚ö†Ô∏è DATABASE_URL missing - PostgreSQL connection will fail")

# –í–∞–ª–∏–¥–∞—Ü–∏—è Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def validate_supabase_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ Supabase"""
    logger.debug("üîç Validating Supabase configuration...")
    
    if SUPABASE_URL and not SUPABASE_KEY:
        logger.error("‚ùå Configuration Error: SUPABASE_URL specified but SUPABASE_ANON_KEY missing")
        logger.error("üí° Both SUPABASE_URL and SUPABASE_ANON_KEY are required together")
        return False
        
    if SUPABASE_KEY and not SUPABASE_URL:
        logger.error("‚ùå Configuration Error: SUPABASE_ANON_KEY specified but SUPABASE_URL missing")
        logger.error("üí° Both SUPABASE_URL and SUPABASE_ANON_KEY are required together")
        return False
        
    if SUPABASE_URL and SUPABASE_KEY:
        logger.info("‚úÖ Supabase configuration is valid")
        return True
        
    logger.info("‚ÑπÔ∏è No Supabase configuration found")
    return True  # –ù–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Supabase

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQLite –ø—É—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –¥–ª—è fallback)
def get_sqlite_path():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç—å –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è fallback"""
    logger.debug("üìÅ Determining SQLite database path...")
    
    if os.getenv('RAILWAY_ENVIRONMENT'):
        logger.debug("üöÇ Railway environment detected")
        try:
            logger.debug("üóÇÔ∏è Attempting to create /data directory...")
            os.makedirs('/data', exist_ok=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
            test_file = '/data/.write_test'
            logger.debug(f"‚úèÔ∏è Testing write permissions: {test_file}")
            with open(test_file, 'w') as f:
                f.write('test')
            os.remove(test_file)
            
            sqlite_path = '/data/edu_digest.db'
            logger.info(f"‚úÖ SQLite path (Railway persistent): {sqlite_path}")
            return sqlite_path
            
        except (PermissionError, OSError) as e:
            logger.warning(f"‚ö†Ô∏è Cannot write to /data directory: {e}")
            sqlite_path = '/tmp/edu_digest.db'
            logger.warning(f"üîÑ Using temporary path: {sqlite_path}")
            return sqlite_path
    else:
        # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
        logger.debug("üè† Local development environment")
        local_data_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data')
        
        try:
            logger.debug(f"üóÇÔ∏è Creating local data directory: {local_data_dir}")
            os.makedirs(local_data_dir, exist_ok=True)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Cannot create local data directory: {e}")
            
        sqlite_path = os.path.join(local_data_dir, 'edu_digest.db')
        logger.info(f"‚úÖ SQLite path (local): {sqlite_path}")
        return sqlite_path

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º DATABASE_PATH - –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è fallback
logger.info("üîß Setting up database paths...")
DATABASE_PATH = get_sqlite_path()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
logger.info("üéØ Determining primary database configuration...")

config_valid = validate_supabase_config()
has_postgres = DATABASE_URL or SUPABASE_URL

if not config_valid or not has_postgres:
    if not config_valid:
        logger.warning("‚ö†Ô∏è Invalid Supabase configuration detected")
    else:
        logger.info("‚ÑπÔ∏è No PostgreSQL configuration found")
    
    logger.warning("üîÑ System will attempt Supabase connection but may fallback to SQLite")
    logger.info(f"üìÅ SQLite fallback path: {DATABASE_PATH}")
else:
    primary_db = SUPABASE_URL or "Direct PostgreSQL connection"
    logger.info(f"‚úÖ Primary database: PostgreSQL ({primary_db})")
    logger.info(f"üîÑ SQLite fallback available at: {DATABASE_PATH}")

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
logger.info("üìã Configuration Summary:")
logger.info("=" * 40)
logger.info(f"üåç Environment: {environment}")
logger.info(f"üì± Telegram API: {'‚úÖ Ready' if TELEGRAM_API_ID and TELEGRAM_API_HASH else '‚ùå Missing credentials'}")
logger.info(f"ü§ñ Claude AI: {'‚úÖ Ready' if ANTHROPIC_API_KEY else '‚ùå Missing API key'}")
logger.info(f"üêò PostgreSQL: {'‚úÖ Configured' if has_postgres else '‚ùå Not configured'}")
logger.info(f"üìÅ SQLite Fallback: ‚úÖ Available at {DATABASE_PATH}")
logger.info(f"üéØ Target Channel: {TARGET_CHANNEL}")
logger.info("=" * 40)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_MAX_NEWS_COUNT = 10
SCHEDULE_TIMES = ['12:00', '18:00']  # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤

# Flask –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
FLASK_SECRET_KEY = os.getenv('FLASK_SECRET_KEY', 'dev-secret-key-change-in-production')
FLASK_PORT = int(os.getenv('PORT', 5002))