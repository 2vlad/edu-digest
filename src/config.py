import os
from dotenv import load_dotenv

load_dotenv()

# Telegram API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_API_ID = os.getenv('TELEGRAM_API_ID')
TELEGRAM_API_HASH = os.getenv('TELEGRAM_API_HASH')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TARGET_CHANNEL = os.getenv('TARGET_CHANNEL', '@vestnik_edtech')

# Claude API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
ANTHROPIC_API_KEY = os.getenv('ANTHROPIC_API_KEY')

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - Supabase (PostgreSQL)
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_ANON_KEY')  # Anon/Public API Key
SUPABASE_SERVICE_KEY = os.getenv('SUPABASE_SERVICE_KEY')  # Service Role Key (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
DATABASE_URL = os.getenv('DATABASE_URL')  # PostgreSQL connection string

# –í–∞–ª–∏–¥–∞—Ü–∏—è Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def validate_supabase_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ Supabase"""
    if SUPABASE_URL and not SUPABASE_KEY:
        print("‚ùå –û—à–∏–±–∫–∞: SUPABASE_URL —É–∫–∞–∑–∞–Ω, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç SUPABASE_ANON_KEY")
        return False
    if SUPABASE_KEY and not SUPABASE_URL:
        print("‚ùå –û—à–∏–±–∫–∞: SUPABASE_ANON_KEY —É–∫–∞–∑–∞–Ω, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç SUPABASE_URL")
        return False
    return True

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ SQLite –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (fallback)
if not validate_supabase_config() or (not DATABASE_URL and not SUPABASE_URL):
    if not validate_supabase_config():
        print("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase, –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite fallback")
    else:
        print("‚ö†Ô∏è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite fallback")
    if os.getenv('RAILWAY_ENVIRONMENT'):
        print("üöÑ Railway environment detected")
        try:
            print("üîç Attempting to create /data directory...")
            os.makedirs('/data', exist_ok=True)
            test_file = '/data/.write_test'
            with open(test_file, 'w') as f:
                f.write('test')
            os.remove(test_file)
            DATABASE_PATH = '/data/edu_digest.db'
            print(f"üóÑÔ∏è Using SQLite at: {DATABASE_PATH}")
        except (PermissionError, OSError) as e:
            DATABASE_PATH = '/tmp/edu_digest.db'
            print(f"üìÅ Using temporary SQLite: {DATABASE_PATH}")
    else:
        DATABASE_PATH = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data', 'edu_digest.db')
        print(f"üè† Local SQLite: {DATABASE_PATH}")
else:
    print(f"üêò Using PostgreSQL: {SUPABASE_URL or 'Direct connection'}")
    DATABASE_PATH = None  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_MAX_NEWS_COUNT = 10
SCHEDULE_TIMES = ['12:00', '18:00']  # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤

# Flask –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
FLASK_SECRET_KEY = os.getenv('FLASK_SECRET_KEY', 'dev-secret-key-change-in-production')
FLASK_PORT = int(os.getenv('PORT', 5002))