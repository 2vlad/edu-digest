#!/usr/bin/env python3
"""
–ê–¥–∞–ø—Ç–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - PostgreSQL –ø–µ—Ä–≤–∏—á–Ω–∞—è, SQLite fallback
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á–µ—Ç–∫–∏–µ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ PostgreSQL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
"""

import logging
import os
from typing import List, Dict, Optional, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/db_adapter.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)
logger.info("üöÄ Initializing DB Adapter - Production Mode")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
try:
    from .config import DATABASE_URL, SUPABASE_URL, SUPABASE_KEY
    logger.info("‚úÖ Config imported from .config")
except ImportError:
    logger.info("üîÑ Fallback to config import")
    try:
        from config import DATABASE_URL, SUPABASE_URL, SUPABASE_KEY
        logger.info("‚úÖ Config imported from config")
    except ImportError as e:
        logger.error(f"‚ùå Failed to import config: {e}")
        DATABASE_URL = None
        SUPABASE_URL = None
        SUPABASE_KEY = None

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
logger.info(f"üîç Environment check:")
logger.info(f"   DATABASE_URL: {'‚úÖ Set' if DATABASE_URL else '‚ùå Missing'}")
logger.info(f"   SUPABASE_URL: {'‚úÖ Set' if SUPABASE_URL else '‚ùå Missing'}")
logger.info(f"   SUPABASE_KEY: {'‚úÖ Set' if SUPABASE_KEY else '‚ùå Missing'}")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PostgreSQL
has_postgres_config = bool(DATABASE_URL or (SUPABASE_URL and SUPABASE_KEY))

if has_postgres_config:
    logger.info("‚úÖ PostgreSQL configuration found - attempting to use Supabase")
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PostgreSQL –º–æ–¥—É–ª–∏
        try:
            from .supabase_db import (
                init_supabase_database,
                test_supabase_db,
                SupabaseChannelsDB,
                SupabaseSettingsDB,
                SupabaseProcessedMessagesDB,
                supabase_db
            )
            logger.info("‚úÖ PostgreSQL modules imported successfully")
        except ImportError:
            from supabase_db import (
                init_supabase_database,
                test_supabase_db,
                SupabaseChannelsDB,
                SupabaseSettingsDB,
                SupabaseProcessedMessagesDB,
                supabase_db
            )
            logger.info("‚úÖ PostgreSQL modules imported via fallback")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL –∫–ª–∞—Å—Å—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        class LoggedChannelsDB:
            @staticmethod
            def add_channel(username: str, display_name: str = None, priority: int = 0) -> int:
                logger.debug(f"üîµ PostgreSQL: add_channel({username}, {display_name}, {priority})")
                try:
                    result = SupabaseChannelsDB.add_channel(username, display_name, priority)
                    logger.info(f"‚úÖ Channel added: {username} -> ID {result}")
                    return result
                except Exception as e:
                    logger.error(f"‚ùå PostgreSQL add_channel failed: {e}")
                    raise
                    
            @staticmethod
            def get_active_channels():
                logger.debug("üîµ PostgreSQL: get_active_channels()")
                try:
                    result = SupabaseChannelsDB.get_active_channels()
                    logger.info(f"‚úÖ Retrieved {len(result)} channels")
                    return result
                except Exception as e:
                    logger.error(f"‚ùå PostgreSQL get_active_channels failed: {e}")
                    raise
                    
            @staticmethod
            def update_last_message_id(channel_id: int, message_id: int):
                logger.debug(f"üîµ PostgreSQL: update_last_message_id({channel_id}, {message_id})")
                try:
                    result = SupabaseChannelsDB.update_last_message_id(channel_id, message_id)
                    logger.info(f"‚úÖ Updated last message ID for channel {channel_id}")
                    return result
                except Exception as e:
                    logger.error(f"‚ùå PostgreSQL update_last_message_id failed: {e}")
                    raise
        
        class LoggedSettingsDB:
            @staticmethod
            def get_setting(key: str, default: str = None):
                logger.debug(f"üîµ PostgreSQL: get_setting({key})")
                try:
                    result = SupabaseSettingsDB.get_setting(key, default)
                    logger.debug(f"‚úÖ Setting: {key} = {result}")
                    return result
                except Exception as e:
                    logger.error(f"‚ùå PostgreSQL get_setting failed: {e}")
                    raise
                    
            @staticmethod
            def set_setting(key: str, value: str, description: str = None):
                logger.debug(f"üîµ PostgreSQL: set_setting({key}, {value})")
                try:
                    result = SupabaseSettingsDB.set_setting(key, value, description)
                    logger.info(f"‚úÖ Setting updated: {key} = {value}")
                    return result
                except Exception as e:
                    logger.error(f"‚ùå PostgreSQL set_setting failed: {e}")
                    raise
        
        class LoggedProcessedMessagesDB:
            @staticmethod
            def is_message_processed(channel_id: int, message_id: int) -> bool:
                logger.debug(f"üîµ PostgreSQL: is_message_processed({channel_id}, {message_id})")
                try:
                    result = SupabaseProcessedMessagesDB.is_message_processed(channel_id, message_id)
                    return result
                except Exception as e:
                    logger.error(f"‚ùå PostgreSQL is_message_processed failed: {e}")
                    raise
                    
            @staticmethod
            def mark_message_processed(channel_id: int, message_id: int, message_text: str = None, summary: str = None) -> int:
                logger.debug(f"üîµ PostgreSQL: mark_message_processed({channel_id}, {message_id})")
                try:
                    result = SupabaseProcessedMessagesDB.mark_message_processed(channel_id, message_id, message_text, summary)
                    logger.info(f"‚úÖ Message marked as processed: ID {result}")
                    return result
                except Exception as e:
                    logger.error(f"‚ùå PostgreSQL mark_message_processed failed: {e}")
                    raise
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL –∫–ª–∞—Å—Å—ã
        ChannelsDB = LoggedChannelsDB
        SettingsDB = LoggedSettingsDB
        ProcessedMessagesDB = LoggedProcessedMessagesDB
        
        def create_connection():
            logger.debug("üîµ PostgreSQL: create_connection()")
            try:
                if not supabase_db.initialized:
                    logger.info("üîß Initializing Supabase connection...")
                    if not supabase_db.initialize():
                        raise Exception("Supabase initialization failed")
                
                connection = supabase_db.get_connection()
                logger.info("‚úÖ PostgreSQL connection established")
                return connection
            except Exception as e:
                logger.error(f"‚ùå PostgreSQL connection failed: {e}")
                raise
        
        def init_database():
            logger.debug("üîµ PostgreSQL: init_database()")
            try:
                logger.info("üöÄ Initializing PostgreSQL database...")
                result = init_supabase_database()
                logger.info("‚úÖ PostgreSQL database initialized")
                return result
            except Exception as e:
                logger.error(f"‚ùå PostgreSQL init failed: {e}")
                raise
        
        def test_db():
            logger.debug("üîµ PostgreSQL: test_db()")
            try:
                result = test_supabase_db()
                if result:
                    logger.info("‚úÖ PostgreSQL test passed")
                else:
                    logger.warning("‚ö†Ô∏è PostgreSQL test failed")
                return result
            except Exception as e:
                logger.error(f"‚ùå PostgreSQL test failed: {e}")
                raise
                
        logger.info("‚úÖ Using PostgreSQL (Supabase) database")
        
    except Exception as e:
        logger.error(f"‚ùå Failed to set up PostgreSQL: {e}")
        logger.error("üîÑ PostgreSQL configured but not working - check Supabase setup")
        has_postgres_config = False

if not has_postgres_config:
    # Fallback –∫ SQLite
    logger.warning("‚ö†Ô∏è PostgreSQL not available - using SQLite fallback")
    logger.warning("üö® THIS IS NOT RECOMMENDED FOR PRODUCTION!")
    
    try:
        from .database import (
            init_database as _sqlite_init,
            test_db as _sqlite_test,
            ChannelsDB as _SQLiteChannelsDB,
            SettingsDB as _SQLiteSettingsDB,
            ProcessedMessagesDB as _SQLiteProcessedMessagesDB,
            create_connection as _sqlite_connection,
        )
    except ImportError:
        from database import (
            init_database as _sqlite_init,
            test_db as _sqlite_test,
            ChannelsDB as _SQLiteChannelsDB,
            SettingsDB as _SQLiteSettingsDB,
            ProcessedMessagesDB as _SQLiteProcessedMessagesDB,
            create_connection as _sqlite_connection,
        )
    
    # Wrapper –∫–ª–∞—Å—Å—ã —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
    class FallbackChannelsDB:
        @staticmethod
        def add_channel(username: str, display_name: str = None, priority: int = 0) -> int:
            logger.warning(f"‚ö†Ô∏è SQLite FALLBACK: add_channel({username})")
            logger.warning("üí° Add PostgreSQL configuration for production use")
            return _SQLiteChannelsDB.add_channel(username, display_name, priority)
            
        @staticmethod
        def get_active_channels():
            logger.warning("‚ö†Ô∏è SQLite FALLBACK: get_active_channels()")
            return _SQLiteChannelsDB.get_active_channels()
            
        @staticmethod
        def update_last_message_id(channel_id: int, message_id: int):
            logger.warning(f"‚ö†Ô∏è SQLite FALLBACK: update_last_message_id({channel_id})")
            return _SQLiteChannelsDB.update_last_message_id(channel_id, message_id)
    
    class FallbackSettingsDB:
        @staticmethod
        def get_setting(key: str, default: str = None):
            logger.debug(f"‚ö†Ô∏è SQLite FALLBACK: get_setting({key})")
            return _SQLiteSettingsDB.get_setting(key, default)
            
        @staticmethod
        def set_setting(key: str, value: str, description: str = None):
            logger.warning(f"‚ö†Ô∏è SQLite FALLBACK: set_setting({key})")
            return _SQLiteSettingsDB.set_setting(key, value, description)
    
    class FallbackProcessedMessagesDB:
        @staticmethod
        def is_message_processed(channel_id: int, message_id: int) -> bool:
            return _SQLiteProcessedMessagesDB.is_message_processed(channel_id, message_id)
            
        @staticmethod
        def mark_message_processed(channel_id: int, message_id: int, message_text: str = None, summary: str = None) -> int:
            return _SQLiteProcessedMessagesDB.mark_message_processed(channel_id, message_id, message_text, summary)
    
    ChannelsDB = FallbackChannelsDB
    SettingsDB = FallbackSettingsDB  
    ProcessedMessagesDB = FallbackProcessedMessagesDB
    create_connection = _sqlite_connection
    init_database = _sqlite_init
    test_db = _sqlite_test
    
    logger.info("‚úÖ Using SQLite fallback database")

def get_database_info() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if has_postgres_config:
        return {
            'type': 'PostgreSQL (Supabase)',
            'url': SUPABASE_URL,
            'database_url': DATABASE_URL[:50] + "..." if DATABASE_URL else None,
            'persistent': True,
            'railway_compatible': True,
            'fallback_available': True,
            'production_ready': True
        }
    else:
        from .config import DATABASE_PATH
        return {
            'type': 'SQLite (Fallback)',
            'path': DATABASE_PATH,
            'persistent': '/data/' in DATABASE_PATH if DATABASE_PATH else False,
            'railway_compatible': False,
            'fallback_available': False,
            'production_ready': False
        }

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã
__all__ = [
    'init_database',
    'test_db', 
    'ChannelsDB',
    'SettingsDB',
    'ProcessedMessagesDB',
    'create_connection',
    'get_database_info'
]

if __name__ == "__main__":
    logger.info("üß™ Testing DB Adapter...")
    
    db_info = get_database_info()
    logger.info(f"üóÑÔ∏è Database info: {db_info}")
    
    try:
        init_database()
        logger.info("‚úÖ Database initialized!")
        
        if test_db():
            logger.info("‚úÖ Database test passed!")
        else:
            logger.error("‚ùå Database test failed!")
            
    except Exception as e:
        logger.error(f"‚ùå Error: {e}")
