#!/usr/bin/env python3
"""
–ê–¥–∞–ø—Ç–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ–∂–¥—É SQLite –∏ Supabase
"""

import logging
from typing import List, Dict, Optional, Any

logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –ë–î –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
try:
    from .config import DATABASE_URL, SUPABASE_URL, DATABASE_PATH
except ImportError:
    from config import DATABASE_URL, SUPABASE_URL, DATABASE_PATH

USE_SUPABASE = bool(DATABASE_URL or SUPABASE_URL)

if USE_SUPABASE:
    logger.info("üêò Using Supabase PostgreSQL")
    try:
        from .supabase_db import (
            init_supabase_database as init_database,
            test_supabase_db as test_db,
            SupabaseChannelsDB as ChannelsDB,
            SupabaseSettingsDB as SettingsDB,
            SupabaseProcessedMessagesDB as ProcessedMessagesDB,
            supabase_db
        )
        
        def create_connection():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Supabase"""
            if not supabase_db.initialized:
                supabase_db.initialize()
            return supabase_db.get_connection()
            
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Supabase –º–æ–¥—É–ª–∏: {e}")
        logger.info("üì¶ Fallback to SQLite")
        USE_SUPABASE = False

if not USE_SUPABASE:
    logger.info("üìÅ Using SQLite fallback")
    from .database import (
        init_database,
        test_db,
        ChannelsDB,
        SettingsDB,
        ProcessedMessagesDB,
        create_connection,
        DATABASE_PATH
    )

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã
__all__ = [
    'init_database',
    'test_db', 
    'ChannelsDB',
    'SettingsDB',
    'ProcessedMessagesDB',
    'create_connection',
    'USE_SUPABASE'
]

def get_database_info() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if USE_SUPABASE:
        return {
            'type': 'PostgreSQL (Supabase)',
            'url': DATABASE_URL or SUPABASE_URL,
            'persistent': True,
            'railway_compatible': True
        }
    else:
        return {
            'type': 'SQLite',
            'path': DATABASE_PATH,
            'persistent': DATABASE_PATH and '/data/' in DATABASE_PATH if DATABASE_PATH else False,
            'railway_compatible': False
        }

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞
    db_info = get_database_info()
    print(f"üóÑÔ∏è Database info: {db_info}")
    
    try:
        init_database()
        print("‚úÖ Database initialized successfully!")
        
        if test_db():
            print("‚úÖ Database test passed!")
        else:
            print("‚ùå Database test failed!")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")