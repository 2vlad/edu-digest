import logging
from typing import List, Dict, Optional
from datetime import datetime, timedelta
import asyncio

from telegram import Bot
from telegram.error import TelegramError

from .config import TELEGRAM_BOT_TOKEN, TARGET_CHANNEL
from .database import ChannelsDB, ProcessedMessagesDB

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import os
os.makedirs('logs', exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/telegram_bot.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class TelegramBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API (–ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤)"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.bot = None
        self.initialized = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == "your_bot_token":
                raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
                
            self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            bot_info = await self.bot.get_me()
            logger.info(f"–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{bot_info.username}")
            
            self.initialized = True
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            return False
    
    async def test_bot_connection(self) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞"""
        try:
            if not self.initialized:
                await self.initialize()
            
            if not self.initialized:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞"}
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_info = await self.bot.get_me()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ü–µ–ª–µ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
            try:
                chat = await self.bot.get_chat(TARGET_CHANNEL)
                channel_access = {
                    "accessible": True,
                    "title": chat.title,
                    "type": chat.type,
                    "member_count": getattr(chat, 'member_count', None)
                }
            except TelegramError as e:
                channel_access = {
                    "accessible": False,
                    "error": str(e)
                }
            
            return {
                "status": "success",
                "bot_info": {
                    "username": bot_info.username,
                    "first_name": bot_info.first_name,
                    "id": bot_info.id
                },
                "target_channel": TARGET_CHANNEL,
                "channel_access": channel_access
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
            return {"status": "error", "message": str(e)}
    
    async def send_digest(self, digest_text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª"""
        try:
            if not self.initialized:
                await self.initialize()
            
            if not self.initialized:
                logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ parse_mode –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫)
            message = await self.bot.send_message(
                chat_id=TARGET_CHANNEL,
                text=digest_text,
                disable_web_page_preview=True
            )
            
            logger.info(f"–î–∞–π–¥–∂–µ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {message.message_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return False
    
    async def send_test_message(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        test_text = f"üîß –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç EdTech News Bot\n\n–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        return await self.send_digest(test_text)

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å User API —á–µ—Ä–µ–∑ Telethon
class TelegramChannelReader:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"""
    
    @staticmethod
    async def simulate_channel_messages(channel_username: str, count: int = 5) -> List[Dict]:
        """–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        # –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        messages = []
        base_time = datetime.now()
        
        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ EdTech
        realistic_news = [
            "üöÄ –Ø–Ω–¥–µ–∫—Å –∑–∞–ø—É—Å—Ç–∏–ª –Ω–æ–≤—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º. –°–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç GPT-4 –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –≤—É–∑–æ–≤.",
            "üìö Mail.ru Group –æ–±—ä—è–≤–∏–ª–∞ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –Ω–∞ –±–∞–∑–µ VK. –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–æ–≤, –≤–µ–±–∏–Ω–∞—Ä–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø—Ä—è–º–æ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏.",
            "üéØ –°–±–µ—Ä –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É '–°–±–µ—Ä –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç' —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏. –°—Ç—É–¥–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –∏–∑—É—á–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∏–º–º–µ—Ä—Å–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ.",
            "üí° –†–æ—Å—Å–∏–π—Å–∫–∞—è EdTech –∫–æ–º–ø–∞–Ω–∏—è MAXIMUM Education –ø—Ä–∏–≤–ª–µ–∫–ª–∞ $15 –º–ª–Ω –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —ç–∫–∑–∞–º–µ–Ω–∞–º.",
            "üî¨ –ú–ì–£ –∑–∞–ø—É—Å—Ç–∏–ª –ø—Ä–æ–≥—Ä–∞–º–º—É —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º blockchain –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∏–ø–ª–æ–º–æ–≤ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤.",
            "üåê –ù–µ—Ç–æ–ª–æ–≥–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é.",
            "ü§ñ Skyeng –≤–Ω–µ–¥—Ä–∏–ª –ò–ò-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å –∏ —Ç–µ–º–ø –æ–±—É—á–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.",
            "üì± GeekBrains –∑–∞–ø—É—Å—Ç–∏–ª –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –º–∏–∫—Ä–æ–æ–±—É—á–µ–Ω–∏–µ–º - —Å—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∏–∑—É—á–∞—Ç—å IT-–Ω–∞–≤—ã–∫–∏ –ø–æ 15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å —Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø—Ä–æ—Ü–µ—Å—Å–∞.",
        ]
        
        for i in range(count):
            news_text = realistic_news[i % len(realistic_news)] if i < len(realistic_news) else f"EdTech –Ω–æ–≤–æ—Å—Ç—å #{i+1}: –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è."
            
            messages.append({
                'id': 1000 + i,
                'date': base_time - timedelta(hours=i),
                'text': news_text,
                'channel': channel_username,
                'link': f"https://t.me/{channel_username.replace('@', '')}/{1000 + i}",
                'media_type': None,
                'external_links': [],
                'views': 100 + i * 10,
                'forwards': i * 2,
                'is_reply': False,
                'sender_id': 12345,
                'channel_id': 1,  # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∏–∑ –ë–î
                'priority': 5
            })
        
        return messages
    
    async def test_channel_reading(self) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            channels = ChannelsDB.get_active_channels()
            
            if not channels:
                return {
                    "status": "warning", 
                    "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                }
            
            results = {}
            for channel in channels[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–∞–Ω–∞–ª–∞
                username = channel['username']
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                messages = await self.simulate_channel_messages(username, 3)
                
                results[username] = {
                    "accessible": True,
                    "message_count": len(messages),
                    "sample_messages": [
                        {
                            "id": msg['id'],
                            "date": msg['date'].strftime('%Y-%m-%d %H:%M:%S'),
                            "text_preview": msg['text'][:100] + "..."
                        } for msg in messages[:2]
                    ]
                }
            
            return {
                "status": "success",
                "channels_tested": len(results),
                "results": results,
                "note": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telethon"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return {"status": "error", "message": str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
_bot_instance = None

async def get_telegram_bot() -> TelegramBot:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
    global _bot_instance
    if _bot_instance is None:
        _bot_instance = TelegramBot()
        await _bot_instance.initialize()
    return _bot_instance