#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
–¢–û–õ–¨–ö–û SUPABASE - –ë–ï–ó SQLite FALLBACK
"""

import asyncio
import logging
from typing import List, Dict, Optional, Any
from datetime import datetime, timedelta

# –ò–º–ø–æ—Ä—Ç—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
from .database import (ChannelsDB, ProcessedMessagesDB, SettingsDB, 
                      create_connection)
from .claude_summarizer import get_claude_summarizer
from .telegram_bot import get_telegram_bot, TelegramChannelReader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/news_collector.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class NewsCollector:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    
    def __init__(self):
        self.claude_summarizer = None
        self.telegram_bot = None
        self.channel_reader = None
        self.run_id = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.max_news_count = 10
        self.hours_lookback = 12
        self.target_channel = "@vestnik_edtech"
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NewsCollector...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–±–æ—Ä–∞
            self.claude_summarizer = await get_claude_summarizer()
            self.telegram_bot = await get_telegram_bot() 
            self.channel_reader = TelegramChannelReader()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self._load_settings()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—É—Å–∫–µ
            self.run_id = self._create_run_log()
            
            logger.info("‚úÖ NewsCollector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NewsCollector: {e}")
            return False
    
    async def _load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.max_news_count = int(SettingsDB.get_setting('max_news_count', '10'))
        self.hours_lookback = int(SettingsDB.get_setting('hours_lookback', '12'))
        self.target_channel = SettingsDB.get_setting('target_channel', '@vestnik_edtech')
        
        logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏: max_news={self.max_news_count}, lookback={self.hours_lookback}h, target={self.target_channel}")
    
    def _create_run_log(self) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–ø—É—Å–∫–µ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        conn = create_connection()
        if conn is None:
            logger.warning("‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–∞ –∑–∞–ø—É—Å–∫–∞")
            return None
            
        cursor = conn.cursor()
        try:
            cursor.execute('''
                INSERT INTO run_logs (started_at, status) 
                VALUES (CURRENT_TIMESTAMP, 'started')
                RETURNING id
            ''')
            result = cursor.fetchone()
            run_id = result['id']
            logger.info(f"üìù –°–æ–∑–¥–∞–Ω –ª–æ–≥ –∑–∞–ø—É—Å–∫–∞ #{run_id}")
            return run_id
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return None
    
    def _update_run_log(self, status: str, channels_processed: int = 0, 
                       messages_collected: int = 0, news_published: int = 0, 
                       error_message: str = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–ø—É—Å–∫–µ"""
        if not self.run_id:
            return
            
        conn = create_connection()
        if conn is None:
            logger.warning("‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞ –∑–∞–ø—É—Å–∫–∞")
            return
            
        cursor = conn.cursor()
        try:
            cursor.execute('''
                UPDATE run_logs SET 
                    completed_at = CURRENT_TIMESTAMP,
                    status = %s,
                    channels_processed = %s,
                    messages_collected = %s,
                    news_published = %s,
                    error_message = %s
                WHERE id = %s
            ''', (status, channels_processed, messages_collected, 
                  news_published, error_message, self.run_id))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    
    async def collect_news(self) -> Dict[str, Any]:
        """–°–±–æ—Ä –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            logger.info("üì° –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            channels = ChannelsDB.get_active_channels()
            if not channels:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                return {"success": False, "error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"}
            
            logger.info(f"üì∫ –ù–∞–π–¥–µ–Ω–æ {len(channels)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
            
            all_messages = []
            channels_processed = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
            for channel in channels:
                try:
                    logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª {channel['username']} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {channel['priority']})")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telethon
                    try:
                        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ {channel['username']}")
                        from .telegram_reader import get_telegram_reader
                        real_reader = await get_telegram_reader()
                        
                        if not real_reader:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram reader –¥–ª—è {channel['username']}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                            
                        if not real_reader.initialized:
                            logger.warning(f"‚ö†Ô∏è Telegram reader –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {channel['username']}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                            
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        messages = await real_reader.get_channel_messages(channel['username'], limit=50, hours_lookback=self.hours_lookback)
                        
                        if not messages:
                            logger.info(f"‚ÑπÔ∏è {channel['username']}: –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                            
                    except Exception as reader_error:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ {channel['username']}: {reader_error} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª")
                        continue
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    new_messages = []
                    for msg in messages:
                        msg['channel_id'] = channel['id']
                        msg['priority'] = channel['priority']
                        msg['channel_display'] = channel.get('display_name', channel['username'])
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                        if not ProcessedMessagesDB.is_message_processed(channel['id'], msg['id']):
                            new_messages.append(msg)
                    
                    all_messages.extend(new_messages)
                    channels_processed += 1
                    
                    logger.info(f"‚úÖ {channel['username']}: –Ω–∞–π–¥–µ–Ω–æ {len(new_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel['username']}: {e}")
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∫–∞–Ω–∞–ª–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
            all_messages.sort(key=lambda x: (-x['priority'], -x['date'].timestamp()))
            
            logger.info(f"üìä –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ {len(all_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {channels_processed} –∫–∞–Ω–∞–ª–æ–≤")
            
            return {
                "success": True,
                "messages": all_messages,
                "channels_processed": channels_processed
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return {"success": False, "error": str(e)}
    
    async def filter_and_prioritize(self, messages: List[Dict]) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not messages:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
            return []
        
        logger.info(f"üéØ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤) - –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC
        from datetime import timezone
        time_threshold = datetime.now(timezone.utc) - timedelta(hours=self.hours_lookback)
        time_filtered = []
        
        for msg in messages:
            if msg['date'] >= time_threshold:
                time_filtered.append(msg)
        
        logger.info(f"‚è∞ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {len(time_filtered)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (EdTech –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)
        edtech_keywords = [
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω', '—É—á–µ–±', '—Å—Ç—É–¥–µ–Ω—Ç', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '—à–∫–æ–ª', '–æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å',
            'edtech', '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω', '–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω', '—Ü–∏—Ñ—Ä–æ–≤', '—Ç–µ—Ö–Ω–æ–ª–æ–≥',
            '–ø–ª–∞—Ç—Ñ–æ—Ä–º', '—Å—Ç–∞—Ä—Ç–∞–ø', '–∏–Ω–Ω–æ–≤–∞—Ü', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', 'ai',
            '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–¥–∞–Ω–Ω—ã–µ', '–∞–Ω–∞–ª–∏—Ç–∏–∫', '–∫—É—Ä—Å', '–æ–±—É—á–µ–Ω–∏'
        ]
        
        content_filtered = []
        for msg in time_filtered:
            text_lower = msg['text'].lower()
            relevance_score = sum(1 for keyword in edtech_keywords if keyword in text_lower)
            
            if relevance_score > 0:  # –ú–∏–Ω–∏–º—É–º –æ–¥–Ω–æ EdTech –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
                msg['relevance_score'] = relevance_score
                content_filtered.append(msg)
        
        logger.info(f"üéØ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {len(content_filtered)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        def priority_score(msg):
            return (
                msg['priority'] * 10 +  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–Ω–∞–ª–∞ (0-100)
                msg.get('relevance_score', 0) * 5 +  # –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å (0-50+)
                min(msg.get('views', 0) or 0, 1000) / 100  # –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (0-10)
            )
        
        content_filtered.sort(key=priority_score, reverse=True)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        final_messages = content_filtered[:self.max_news_count]
        
        logger.info(f"üìã –§–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(final_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∞–∫—Å. {self.max_news_count})")
        
        return final_messages
    
    async def summarize_messages(self, messages: List[Dict]) -> List[Dict]:
        """–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é Claude AI"""
        if not messages:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
            return []
        
        logger.info(f"ü§ñ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        summarized_messages = []
        
        for msg in messages:
            try:
                # –°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                if self.claude_summarizer:
                    result = await self.claude_summarizer.summarize_message(
                        msg['text'], 
                        msg.get('channel_display', msg.get('channel', ''))
                    )
                    if result['success']:
                        msg['summary'] = result['summary']
                        msg['summary_quality'] = result.get('quality_score', 8)
                    else:
                        msg['summary'] = result['summary']  # Fallback summary
                        msg['summary_quality'] = 3
                else:
                    # Fallback: –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 150 —Å–∏–º–≤–æ–ª–æ–≤
                    msg['summary'] = msg['text'][:150] + "..." if len(msg['text']) > 150 else msg['text']
                    msg['summary_quality'] = 5
                
                summarized_messages.append(msg)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg['id']}: {e}")
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                msg['summary'] = msg['text'][:150] + "..." if len(msg['text']) > 150 else msg['text']
                msg['summary_quality'] = 3
                summarized_messages.append(msg)
        
        logger.info(f"‚úÖ –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(summarized_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        return summarized_messages
    
    def format_digest(self, messages: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        if not messages:
            return "üì∞ –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π EdTech —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        logger.info(f"üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        from datetime import timezone
        current_hour = datetime.now(timezone.utc).hour + 3  # MSK
        digest_type = "–£—Ç—Ä–µ–Ω–Ω–∏–π" if 9 <= current_hour < 15 else "–í–µ—á–µ—Ä–Ω–∏–π"
        
        digest_lines = []
        # –£–±–∏—Ä–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ —É —Ç–∞–π—Ç–ª–∞
        digest_lines.append(f"{digest_type} –¥–∞–π–¥–∂–µ—Å—Ç")
        digest_lines.append("")  # –û—Ç–±–∏–≤–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for i, msg in enumerate(messages):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é Claude –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            if 'summary' in msg and msg['summary']:
                summary = msg['summary']
            else:
                # Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É (–±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π)
                text = msg['text']
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                sentences_end = []
                for idx, char in enumerate(text):
                    if char in '.!?' and idx < 300:
                        sentences_end.append(idx)
                        if len(sentences_end) >= 2:  # –ë–µ—Ä–µ–º –¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                            break
                
                if len(sentences_end) >= 2:
                    summary = text[:sentences_end[1] + 1].strip()
                elif len(sentences_end) == 1:
                    summary = text[:sentences_end[0] + 1].strip()
                else:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤
                    summary = text[:150].strip()
                    if len(text) > 150:
                        summary += '...'
                
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å—Å—ã–ª–∫–∏
                summary = summary.replace('**', '').replace('*', '')
                summary = summary.split('\n')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                summary = summary.split('[')[0]  # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
                summary = summary.split('(http')[0]  # –£–±–∏—Ä–∞–µ–º URL
                summary = summary.strip()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É
            channel_display = msg.get('channel_display', msg.get('channel', 'Unknown'))
            channel_username = msg.get('channel', '')
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (—É–±–∏—Ä–∞–µ–º @ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏)
            clean_username = channel_username.lstrip('@') if channel_username else 'unknown'
            channel_link = f"https://t.me/{clean_username}"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É: ‚Äî –ó–∞–≥–æ–ª–æ–≤–æ–∫ ([–ö–∞–Ω–∞–ª](—Å—Å—ã–ª–∫–∞))
            digest_lines.append(f"‚Äî {summary} ([{channel_display}]({channel_link}))")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–±–∏–≤–∫—É –º–µ–∂–¥—É –Ω–æ–≤–æ—Å—Ç—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if i < len(messages) - 1:
                digest_lines.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å–Ω—ã–π —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω—Ü–µ
        import random
        style_emojis = ['üçø', 'üéØ', 'üöÄ', '‚ú®', 'üí°', 'üî•', '‚ö°', 'üåü', 'üí´', 'üé™', 'üé®', 'üé≠']
        random_emoji = random.choice(style_emojis)
        
        digest_lines.append("")
        digest_lines.append(random_emoji)
        
        digest_text = "\n".join(digest_lines)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –¥–ª—è Telegram (–º–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(digest_text) > 4096:
            logger.warning(f"‚ö†Ô∏è –î–∞–π–¥–∂–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(digest_text)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º...")
            # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è—è —ç–º–æ–¥–∑–∏
            lines_without_emoji = digest_lines[:-2]
            while len("\n".join(lines_without_emoji + ["", random_emoji])) > 4000:
                lines_without_emoji.pop()
            digest_text = "\n".join(lines_without_emoji + ["", random_emoji])
        
        logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {len(digest_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        return digest_text
    
    async def validate_and_publish(self, digest: str, messages: List[Dict]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        try:
            logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π...")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
            validation_errors = []
            
            if len(digest.strip()) < 50:
                validation_errors.append("–î–∞–π–¥–∂–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            
            if len(digest) > 4096:
                validation_errors.append("–î–∞–π–¥–∂–µ—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)")
            
            if not messages:
                validation_errors.append("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            if messages:
                avg_quality = sum(msg.get('summary_quality', 0) for msg in messages) / len(messages)
                if avg_quality < 5:
                    validation_errors.append(f"–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ ({avg_quality:.1f}/10)")
            
            if validation_errors:
                logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {'; '.join(validation_errors)}")
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
            logger.info(f"üì° –ü—É–±–ª–∏–∫—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –≤ {self.target_channel}...")
            
            publication_success = await self.telegram_bot.send_digest(digest)
            
            if publication_success:
                logger.info("‚úÖ –î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
                
                # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                for msg in messages:
                    ProcessedMessagesDB.mark_message_processed(
                        msg['channel_id'], 
                        msg['id'],
                        msg['text'],
                        msg.get('summary', '')
                    )
                
                return {
                    "success": True,
                    "published": True,
                    "validation_errors": validation_errors,
                    "news_count": len(messages),
                    "digest_length": len(digest)
                }
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram")
                return {
                    "success": False,
                    "published": False,
                    "error": "–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram",
                    "validation_errors": validation_errors
                }
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return {
                "success": False,
                "published": False,
                "error": str(e)
            }
    
    async def run_full_cycle(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        start_time = datetime.now()
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not await self.initialize():
                raise Exception("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            
            # –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
            collection_result = await self.collect_news()
            if not collection_result["success"]:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞: {collection_result['error']}")
            
            messages = collection_result["messages"]
            channels_processed = collection_result["channels_processed"]
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è
            filtered_messages = await self.filter_and_prioritize(messages)
            
            # –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
            summarized_messages = await self.summarize_messages(filtered_messages)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            digest = self.format_digest(summarized_messages)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è
            publish_result = await self.validate_and_publish(digest, summarized_messages)
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            end_time = datetime.now()
            execution_time = (end_time - start_time).total_seconds()
            
            result = {
                "success": publish_result["success"],
                "execution_time": execution_time,
                "channels_processed": channels_processed,
                "messages_collected": len(messages),
                "messages_filtered": len(filtered_messages),
                "messages_summarized": len(summarized_messages),
                "news_published": len(summarized_messages) if publish_result["published"] else 0,
                "digest_length": len(digest),
                "validation_errors": publish_result.get("validation_errors", []),
                "published": publish_result["published"]
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ –∑–∞–ø—É—Å–∫–∞
            status = "completed" if result["success"] else "failed"
            self._update_run_log(
                status=status,
                channels_processed=result["channels_processed"],
                messages_collected=result["messages_collected"],
                news_published=result["news_published"],
                error_message=publish_result.get("error") if not result["success"] else None
            )
            
            logger.info(f"üéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {execution_time:.1f}—Å:")
            logger.info(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {result['channels_processed']}")
            logger.info(f"   üìù –°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {result['messages_collected']}")
            logger.info(f"   üéØ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {result['messages_filtered']}")
            logger.info(f"   ü§ñ –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result['messages_summarized']}")
            logger.info(f"   üì∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {result['news_published']}")
            logger.info(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {'–£—Å–ø–µ—à–Ω–æ' if result['success'] else '–û—à–∏–±–∫–∞'}")
            
            return result
            
        except Exception as e:
            end_time = datetime.now()
            execution_time = (end_time - start_time).total_seconds()
            
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ –∑–∞–ø—É—Å–∫–∞ —Å –æ—à–∏–±–∫–æ–π
            self._update_run_log(
                status="failed",
                error_message=str(e)
            )
            
            return {
                "success": False,
                "execution_time": execution_time,
                "error": str(e),
                "channels_processed": 0,
                "messages_collected": 0,
                "messages_filtered": 0,
                "messages_summarized": 0,
                "news_published": 0
            }

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    collector = NewsCollector()
    result = await collector.run_full_cycle()
    
    if result["success"]:
        print("‚úÖ –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        exit(0)
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {result['error']}")
        exit(1)

if __name__ == "__main__":
    asyncio.run(main())