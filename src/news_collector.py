#!/usr/bin/env python3
"""
Task 5: –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
"""

import asyncio
import logging
from typing import List, Dict, Optional, Any
from datetime import datetime, timedelta

# –ò–º–ø–æ—Ä—Ç—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
from .database import (ChannelsDB, ProcessedMessagesDB, SettingsDB, 
                      create_connection, sqlite3)
from .claude_summarizer import get_claude_summarizer
from .telegram_bot import get_telegram_bot, TelegramChannelReader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import os
os.makedirs('logs', exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/news_collector.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class NewsCollector:
    """5.1-5.7: –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    
    def __init__(self):
        self.claude_summarizer = None
        self.telegram_bot = None
        self.channel_reader = None
        self.run_id = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.max_news_count = 10
        self.hours_lookback = 12
        self.target_channel = "@vestnik_edtech"
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NewsCollector...")
            
            # 5.1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–±–æ—Ä–∞
            self.claude_summarizer = await get_claude_summarizer()
            self.telegram_bot = await get_telegram_bot() 
            self.channel_reader = TelegramChannelReader()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self._load_settings()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—É—Å–∫–µ
            self.run_id = self._create_run_log()
            
            logger.info("‚úÖ NewsCollector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NewsCollector: {e}")
            return False
    
    async def _load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.max_news_count = int(SettingsDB.get_setting('max_news_count', '10'))
        self.hours_lookback = int(SettingsDB.get_setting('hours_lookback', '12'))
        self.target_channel = SettingsDB.get_setting('target_channel', '@vestnik_edtech')
        
        logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏: max_news={self.max_news_count}, lookback={self.hours_lookback}h, target={self.target_channel}")
    
    def _create_run_log(self) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–ø—É—Å–∫–µ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        conn = create_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('''
                INSERT INTO run_logs (started_at, status) 
                VALUES (CURRENT_TIMESTAMP, 'started')
            ''')
            conn.commit()
            run_id = cursor.lastrowid
            logger.info(f"üìù –°–æ–∑–¥–∞–Ω –ª–æ–≥ –∑–∞–ø—É—Å–∫–∞ #{run_id}")
            return run_id
        finally:
            conn.close()
    
    def _update_run_log(self, status: str, channels_processed: int = 0, 
                       messages_collected: int = 0, news_published: int = 0, 
                       error_message: str = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–ø—É—Å–∫–µ"""
        if not self.run_id:
            return
            
        conn = create_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('''
                UPDATE run_logs SET 
                    completed_at = CURRENT_TIMESTAMP,
                    status = ?,
                    channels_processed = ?,
                    messages_collected = ?,
                    news_published = ?,
                    error_message = ?
                WHERE id = ?
            ''', (status, channels_processed, messages_collected, 
                  news_published, error_message, self.run_id))
            conn.commit()
        finally:
            conn.close()
    
    async def collect_news(self) -> Dict[str, Any]:
        """5.2. –°–±–æ—Ä –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            logger.info("üì° –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            channels = ChannelsDB.get_active_channels()
            if not channels:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                return {"success": False, "error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"}
            
            logger.info(f"üì∫ –ù–∞–π–¥–µ–Ω–æ {len(channels)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
            
            all_messages = []
            channels_processed = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
            for channel in channels:
                try:
                    logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª {channel['username']} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {channel['priority']})")
                    
                    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telethon
                    try:
                        from .telegram_reader import get_telegram_reader
                        real_reader = await get_telegram_reader()
                        if real_reader and real_reader.initialized:
                            messages = await real_reader.get_channel_messages(
                                channel['username'], 
                                limit=10, 
                                hours_lookback=self.hours_lookback
                            )
                            logger.info(f"üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ {channel['username']}")
                        else:
                            # Fallback –Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—é
                            messages = await self.channel_reader.simulate_channel_messages(
                                channel['username'], 
                                count=5
                            )
                            logger.info(f"üß™ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {channel['username']}")
                    except ImportError:
                        # Fallback –Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—é –µ—Å–ª–∏ telegram_reader –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                        messages = await self.channel_reader.simulate_channel_messages(
                            channel['username'], 
                            count=5
                        )
                        logger.info(f"üß™ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {channel['username']} (fallback)")
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    new_messages = []
                    for msg in messages:
                        msg['channel_id'] = channel['id']
                        msg['priority'] = channel['priority']
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                        if not ProcessedMessagesDB.is_message_processed(channel['id'], msg['id']):
                            new_messages.append(msg)
                    
                    all_messages.extend(new_messages)
                    channels_processed += 1
                    
                    logger.info(f"‚úÖ {channel['username']}: –Ω–∞–π–¥–µ–Ω–æ {len(new_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel['username']}: {e}")
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∫–∞–Ω–∞–ª–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
            all_messages.sort(key=lambda x: (-x['priority'], -x['date'].timestamp()))
            
            logger.info(f"üìä –°–æ–±—Ä–∞–Ω–æ {len(all_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {channels_processed} –∫–∞–Ω–∞–ª–æ–≤")
            
            return {
                "success": True,
                "messages": all_messages,
                "channels_processed": channels_processed,
                "total_messages": len(all_messages)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return {"success": False, "error": str(e)}
    
    async def filter_and_prioritize(self, messages: List[Dict]) -> List[Dict]:
        """5.3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            logger.info(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            if not messages:
                return []
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            time_limit = datetime.now() - timedelta(hours=self.hours_lookback)
            time_filtered = [msg for msg in messages if msg['date'] >= time_limit]
            
            logger.info(f"‚è∞ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ({self.hours_lookback}—á): {len(time_filtered)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é (EdTech —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å)
            edtech_keywords = [
                '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–æ–±—É—á–µ–Ω–∏–µ', '–∫—É—Ä—Å', '—Å—Ç—É–¥–µ–Ω—Ç', '—É—á–µ–±–Ω', '—à–∫–æ–ª', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç',
                'edtech', '–æ–Ω–ª–∞–π–Ω', '–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏', '—Å—Ç–∞—Ä—Ç–∞–ø', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
                '–ò–ò', 'AI', 'VR', 'AR', '—Ü–∏—Ñ—Ä–æ–≤', 'digital', 'learning'
            ]
            
            content_filtered = []
            for msg in time_filtered:
                text_lower = msg['text'].lower()
                relevance_score = sum(1 for keyword in edtech_keywords if keyword in text_lower)
                
                if relevance_score > 0:  # –ú–∏–Ω–∏–º—É–º –æ–¥–Ω–æ EdTech –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
                    msg['relevance_score'] = relevance_score
                    content_filtered.append(msg)
            
            logger.info(f"üéØ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {len(content_filtered)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            # –£—á–∏—Ç—ã–≤–∞–µ–º: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–Ω–∞–ª–∞, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å, –≤—Ä–µ–º—è
            def priority_score(msg):
                return (
                    msg['priority'] * 10 +  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–Ω–∞–ª–∞ (0-100)
                    msg.get('relevance_score', 0) * 5 +  # –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å (0-50+)
                    min(msg['views'] or 0, 1000) / 100  # –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (0-10)
                )
            
            content_filtered.sort(key=priority_score, reverse=True)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            final_messages = content_filtered[:self.max_news_count]
            
            logger.info(f"üìã –§–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(final_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∞–∫—Å. {self.max_news_count})")
            
            return final_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return messages[:self.max_news_count]  # Fallback: –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ N
    
    async def summarize_messages(self, messages: List[Dict]) -> List[Dict]:
        """5.4. –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Claude API"""
        try:
            logger.info(f"ü§ñ –ù–∞—á–∏–Ω–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            if not messages:
                return []
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            batch_messages = []
            for msg in messages:
                batch_messages.append({
                    'text': msg['text'],
                    'channel': msg['channel'],
                    'original_msg': msg  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                })
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞—Ç—á–µ–≤—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            summarized = await self.claude_summarizer.summarize_batch(
                batch_messages, 
                max_concurrent=3
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            processed_messages = []
            successful_summaries = 0
            
            for result in summarized:
                original_msg = result['original_msg']
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
                processed_msg = {
                    **original_msg,
                    'summary': result['summary'],
                    'summary_success': result['summary_success'],
                    'summary_quality': result.get('summary_quality', 0),
                    'processing_time': result.get('processing_time', 0),
                    'fallback_used': result.get('fallback_used', False)
                }
                
                processed_messages.append(processed_msg)
                
                if result['summary_success']:
                    successful_summaries += 1
            
            success_rate = successful_summaries / len(messages) * 100 if messages else 0
            avg_quality = sum(msg.get('summary_quality', 0) for msg in processed_messages) / len(processed_messages) if processed_messages else 0
            
            logger.info(f"‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful_summaries}/{len(messages)} ({success_rate:.1f}%) —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {avg_quality:.1f}/10")
            
            return processed_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            # Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ summary
            for msg in messages:
                msg['summary'] = msg['text'][:100] + "..."
                msg['summary_success'] = False
                msg['fallback_used'] = True
            return messages
    
    def format_digest(self, messages: List[Dict]) -> str:
        """5.5. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            logger.info(f"üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑ {len(messages)} –Ω–æ–≤–æ—Å—Ç–µ–π...")
            
            if not messages:
                return "üì∞ –ù–æ–≤–æ—Å—Ç–µ–π EdTech –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            current_time = datetime.now()
            time_str = current_time.strftime("%d.%m.%Y %H:%M")
            
            header = f"""üì∞ **EdTech –î–∞–π–¥–∂–µ—Å—Ç** | {time_str}
            
üîç {len(messages)} –≥–ª–∞–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:
"""
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å
            news_items = []
            for i, msg in enumerate(messages, 1):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∫–∞–Ω–∞–ª–∞
                if msg.get('priority', 0) >= 8:
                    icon = "üî•"  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                elif msg.get('priority', 0) >= 5:
                    icon = "‚≠ê"  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                else:
                    icon = "üìå"  # –û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç—å
                summary = msg.get('summary', msg['text'][:100] + "...")
                channel_name = msg['channel'].replace('@', '')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
                quality_indicator = ""
                if msg.get('summary_success', False):
                    quality = msg.get('summary_quality', 0)
                    if quality >= 9:
                        quality_indicator = " ‚ú®"  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                    elif quality < 6:
                        quality_indicator = " üìù"  # –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                
                news_item = f"{icon} **{i}.** {summary}{quality_indicator}\n‚îî [{channel_name}]({msg.get('link', '#')})"
                
                if msg.get('fallback_used'):
                    news_item += " üîÑ"  # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä fallback
                
                news_items.append(news_item)
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
            digest = header + "\n\n".join(news_items)
            
            # –î–æ–±–∞–≤–ª—è–µ–º footer
            footer = f"""
            
---
ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç | –°–ª–µ–¥—É—é—â–∏–π –≤—ã–ø—É—Å–∫ —á–µ—Ä–µ–∑ {self.hours_lookback} —á–∞—Å–æ–≤
üí¨ [–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å](https://t.me/vestnik_edtech_bot)"""
            
            digest += footer
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(digest) > 4000:
                logger.warning("‚ö†Ô∏è –î–∞–π–¥–∂–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–æ–∫—Ä–∞—â–∞–µ–º...")
                # –°–æ–∫—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
                short_messages = messages[:min(8, len(messages))]
                return self.format_digest(short_messages)
            
            logger.info(f"üìÑ –î–∞–π–¥–∂–µ—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {len(digest)} —Å–∏–º–≤–æ–ª–æ–≤, {len(messages)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            return digest
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}"
    
    async def validate_and_publish(self, digest: str, messages: List[Dict]) -> Dict[str, Any]:
        """5.6. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        try:
            logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π...")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
            validation_errors = []
            
            if len(digest.strip()) < 50:
                validation_errors.append("–î–∞–π–¥–∂–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            
            if len(digest) > 4096:
                validation_errors.append("–î–∞–π–¥–∂–µ—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)")
            
            if not messages:
                validation_errors.append("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            if messages:
                avg_quality = sum(msg.get('summary_quality', 0) for msg in messages) / len(messages)
                if avg_quality < 5:
                    validation_errors.append(f"–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ ({avg_quality:.1f}/10)")
            
            if validation_errors:
                logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {'; '.join(validation_errors)}")
                # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
            logger.info(f"üì° –ü—É–±–ª–∏–∫—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –≤ {self.target_channel}...")
            
            publication_success = await self.telegram_bot.send_digest(digest)
            
            if publication_success:
                logger.info("‚úÖ –î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
                
                # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                for msg in messages:
                    ProcessedMessagesDB.mark_message_processed(
                        msg['channel_id'], 
                        msg['id'],
                        msg['text'],
                        msg.get('summary', '')
                    )
                
                return {
                    "success": True,
                    "published": True,
                    "validation_errors": validation_errors,
                    "news_count": len(messages),
                    "digest_length": len(digest)
                }
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram")
                return {
                    "success": False,
                    "published": False,
                    "error": "–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram",
                    "validation_errors": validation_errors
                }
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return {
                "success": False,
                "published": False,
                "error": str(e)
            }
    
    async def run_full_cycle(self) -> Dict[str, Any]:
        """5.7. –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        start_time = datetime.now()
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not await self.initialize():
                raise Exception("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            
            # 5.2. –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
            collection_result = await self.collect_news()
            if not collection_result["success"]:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞: {collection_result['error']}")
            
            messages = collection_result["messages"]
            channels_processed = collection_result["channels_processed"]
            
            # 5.3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è
            filtered_messages = await self.filter_and_prioritize(messages)
            
            # 5.4. –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
            summarized_messages = await self.summarize_messages(filtered_messages)
            
            # 5.5. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            digest = self.format_digest(summarized_messages)
            
            # 5.6. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è
            publish_result = await self.validate_and_publish(digest, summarized_messages)
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            end_time = datetime.now()
            execution_time = (end_time - start_time).total_seconds()
            
            result = {
                "success": publish_result["success"],
                "execution_time": execution_time,
                "channels_processed": channels_processed,
                "messages_collected": len(messages),
                "messages_filtered": len(filtered_messages),
                "messages_summarized": len(summarized_messages),
                "news_published": len(summarized_messages) if publish_result["published"] else 0,
                "digest_length": len(digest),
                "validation_errors": publish_result.get("validation_errors", []),
                "published": publish_result["published"]
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ –∑–∞–ø—É—Å–∫–∞
            status = "completed" if result["success"] else "failed"
            self._update_run_log(
                status=status,
                channels_processed=result["channels_processed"],
                messages_collected=result["messages_collected"],
                news_published=result["news_published"],
                error_message=publish_result.get("error") if not result["success"] else None
            )
            
            logger.info(f"üéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {execution_time:.1f}—Å:")
            logger.info(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {result['channels_processed']}")
            logger.info(f"   üìù –°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {result['messages_collected']}")
            logger.info(f"   üéØ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {result['messages_filtered']}")
            logger.info(f"   ü§ñ –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result['messages_summarized']}")
            logger.info(f"   üì∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {result['news_published']}")
            logger.info(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {'–£—Å–ø–µ—à–Ω–æ' if result['success'] else '–û—à–∏–±–∫–∞'}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ –æ–± –æ—à–∏–±–∫–µ
            self._update_run_log(
                status="failed",
                error_message=str(e)
            )
            
            return {
                "success": False,
                "error": str(e),
                "execution_time": (datetime.now() - start_time).total_seconds()
            }

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    collector = NewsCollector()
    result = await collector.run_full_cycle()
    
    if result["success"]:
        print("‚úÖ –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        exit(0)
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {result['error']}")
        exit(1)

if __name__ == "__main__":
    asyncio.run(main())