import asyncio
import logging
import time
from typing import List, Dict, Optional, Any
from datetime import datetime

from anthropic import AsyncAnthropic
from anthropic.types import MessageParam

from .config import ANTHROPIC_API_KEY
from .database import SettingsDB

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import os
os.makedirs('logs', exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/claude.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class ClaudeSummarizer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Claude API"""
    
    def __init__(self):
        """4.1. Anthropic client setup –∏ API key –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
        self.client = None
        self.initialized = False
        self.api_key = ANTHROPIC_API_KEY
        self.model = "claude-3-5-sonnet-20241022"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π Sonnet –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.max_tokens = 200
        self.temperature = 0.1  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Claude –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            if not self.api_key or self.api_key == "your_claude_api_key":
                raise ValueError("ANTHROPIC_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
            
            self.client = AsyncAnthropic(
            api_key=self.api_key,
            max_retries=0  # –ú—ã —Å–∞–º–∏ —É–ø—Ä–∞–≤–ª—è–µ–º retry –ª–æ–≥–∏–∫–æ–π
        )
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            max_length = SettingsDB.get_setting('summary_max_length', '150')
            self.max_tokens = int(max_length)
            
            self.initialized = True
            logger.info("Claude API –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Claude API: {e}")
            return False
    
    def _get_edtech_prompt(self, message_text: str, channel_name: str = "") -> tuple[str, List[MessageParam]]:
        """4.2. EdTech-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        
        # –ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
        system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º (EdTech). 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∂–∏–≤—ã–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–µ–π, –∫–∞–∫ –±—É–¥—Ç–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –∑–Ω–∞–∫–æ–º–æ–º—É.

–ü–†–ê–í–ò–õ–ê –ù–ï–§–û–†–ú–ê–õ–¨–ù–û–ì–û –°–ê–ú–ú–ê–†–ò:
1. –ú–∞–∫—Å–∏–º—É–º 120-140 —Å–∏–º–≤–æ–ª–æ–≤ (–∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
2. –ü–∏—à–∏ –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –∏–∑–±–µ–≥–∞–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∑–º–æ–≤
3. –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ª–æ–≥: "–°–±–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª", –∞ –Ω–µ "–±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ"
4. –í–∫–ª—é—á–∞–π –∫–ª—é—á–µ–≤—ã–µ —Ü–∏—Ñ—Ä—ã, –Ω–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π
5. –ì–æ–≤–æ—Ä–∏ –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º —è–∑—ã–∫–µ

–ü–†–ò–ú–ï–†–´ –•–û–†–û–®–ò–• –°–ê–ú–ú–ê–†–ò:
"Coursera –∑–∞–ø—É—Å—Ç–∏–ª–∞ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ ‚Äî –≤ 10 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ"
"–°–±–µ—Ä –¥–æ–±–∞–≤–∏–ª VR –≤ —Å–≤–æ—é –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —É—Ä–æ–∫–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏" 
"MAXIMUM Education –ø–æ–ª—É—á–∏–ª–∞ $15M –Ω–∞ AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠"
"–ú–∏–Ω–ø—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –∏–∑–±—ã—Ç–∫—É —É—á–∏—Ç–µ–ª–µ–π –∫ 2030 –≥–æ–¥—É –∏–∑-–∑–∞ —Å–ø–∞–¥–∞ —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏"

–ü–ò–®–ò –ö–ê–ö –ß–ï–õ–û–í–ï–ö:
- –ö–æ—Ä–æ—Ç–∫–∏–µ, –∂–∏–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –ë–µ–∑ –±—é—Ä–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É
- –ö–∞–∫ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –¥—Ä—É–≥–∞

–ò–ó–ë–ï–ì–ê–ô:
- "–í —Å–≤—è–∑–∏ —Å", "–≤ —Ä–∞–º–∫–∞—Ö", "–æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è"
- –°–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ –ø—Ä–∏—á–∞—Å—Ç–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
- –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏ –±–µ–∑ –Ω—É–∂–¥—ã

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û —Å–∞–º–º–∞—Ä–∏, –Ω–∏–∫–∞–∫–∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
- –ù–ï –ø–∏—à–∏ "–≠—Ç–æ —Å–∞–º–º–∞—Ä–∏:", "–ö–æ—Ä–æ—Ç–∫–æ–µ –∏ —è—Å–Ω–æ–µ" –∏ –ø–æ–¥–æ–±–Ω–æ–µ
- –ù–ï —Å–æ–∑–¥–∞–≤–∞–π —Å–ø–∏—Å–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏–ª–∏ –æ—Ü–µ–Ω–æ–∫
- –¢–û–õ–¨–ö–û –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–æ–≤–æ—Å—Ç—å—é"""

        user_prompt = f"""–ü–µ—Ä–µ—Å–∫–∞–∂–∏ —ç—Ç—É EdTech –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –∫–∞–∫ –±—É–¥—Ç–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –¥—Ä—É–≥—É:

{message_text}

–ò—Å—Ç–æ—á–Ω–∏–∫: {channel_name}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º –∫–æ—Ä–æ—Ç–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º-—Å–∞–º–º–∞—Ä–∏, –º–∞–∫—Å–∏–º—É–º 140 —Å–∏–º–≤–æ–ª–æ–≤. 
–ù–ï –æ–±—ä—è—Å–Ω—è–π –ø–æ—á–µ–º—É —Å–∞–º–º–∞—Ä–∏ —Ö–æ—Ä–æ—à–µ–µ, –ù–ï –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ù–ï –ø–µ—Ä–µ—á–∏—Å–ª—è–π –∫—Ä–∏—Ç–µ—Ä–∏–∏.
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–∞–º–º–∞—Ä–∏ –∏ –≤—Å—ë."""

        messages = [{"role": "user", "content": user_prompt}]
        
        return system_prompt, messages
    
    async def evaluate_relevance(self, message_text: str, channel_name: str = "") -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è EdTech –∫–æ–º–∞–Ω–¥—ã"""
        
        if not self.initialized:
            await self.initialize()
        
        if not self.initialized:
            return {
                "success": False,
                "error": "Claude API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                "relevance_score": 5,  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                "fallback_used": True
            }
        
        try:
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º (EdTech).
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ü–µ–Ω–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏–∑ 40 —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.

–ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò (0-10):
10 - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ: –ø—Ä–æ—Ä—ã–≤–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏, –∫—Ä—É–ø–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ EdTech, –Ω–æ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏–Ω–¥—É—Å—Ç—Ä–∏–∏
9-8 - –û—á–µ–Ω—å –≤–∞–∂–Ω–æ: –Ω–æ–≤—ã–µ EdTech –ø—Ä–æ–¥—É–∫—Ç—ã, –∑–Ω–∞—á–∏–º—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏  
7-6 - –í–∞–∂–Ω–æ: –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—Ä—É–ø–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–µ–π—Å—ã, –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
5-4 - –£–º–µ—Ä–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ: –æ–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏, –Ω–µ–±–æ–ª—å—à–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
3-1 - –ú–∞–ª–æ–∑–Ω–∞—á–∏–º–æ: –∫–æ—Å–≤–µ–Ω–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –æ—á–µ–Ω—å —É–∑–∫–∏–µ —Ç–µ–º—ã
0 - –ù–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ: –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –∏–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏

–§–û–ö–£–° –ù–ê:
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
- –ò–ò –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏  
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- UX/UI –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
- –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ —Ä—ã–Ω–æ–∫ EdTech

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 10."""

            user_prompt = f"""–û—Ü–µ–Ω–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:

{message_text}

–ò—Å—Ç–æ—á–Ω–∏–∫: {channel_name}

–û—Ü–µ–Ω–∫–∞ (0-10):"""

            messages = [{"role": "user", "content": user_prompt}]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude API
            response = await self.client.messages.create(
                model=self.model,
                max_tokens=10,  # –ù—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ
                temperature=0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                system=system_prompt,
                messages=messages
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É
            if response.content and len(response.content) > 0:
                score_text = response.content[0].text.strip()
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ
                import re
                score_match = re.search(r'\b([0-9]|10)\b', score_text)
                if score_match:
                    relevance_score = int(score_match.group(1))
                else:
                    relevance_score = 5  # Fallback
                
                logger.info(f"üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–µ–Ω–∞: {relevance_score}/10")
                
                return {
                    "success": True,
                    "relevance_score": relevance_score,
                    "explanation": score_text,
                    "fallback_used": False
                }
            else:
                raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Claude API")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")
            return {
                "success": False,
                "error": str(e),
                "relevance_score": 5,  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                "fallback_used": True
            }

    async def summarize_message(self, message_text: str, channel_name: str = "", 
                               retry_count: int = 0) -> Dict[str, Any]:
        """–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        
        if not self.initialized:
            await self.initialize()
        
        if not self.initialized:
            return {
                "success": False,
                "error": "Claude API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                "summary": message_text[:100] + "...",  # Fallback
                "fallback_used": True
            }
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
            system_prompt, messages = self._get_edtech_prompt(message_text, channel_name)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude API
            start_time = time.time()
            
            response = await self.client.messages.create(
                model=self.model,
                max_tokens=self.max_tokens,
                temperature=self.temperature,
                system=system_prompt,
                messages=messages
            )
            
            processing_time = time.time() - start_time
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            if response.content and len(response.content) > 0:
                summary = response.content[0].text.strip()
                
                # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ Claude –∏—Ö –¥–æ–±–∞–≤–∏–ª
                if summary.startswith('"') and summary.endswith('"'):
                    summary = summary[1:-1].strip()
                elif summary.startswith("'") and summary.endswith("'"):
                    summary = summary[1:-1].strip()
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Ç–∞-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ Claude
                summary = self._filter_meta_commentary(summary)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                quality_check = self._validate_summary_quality(summary, message_text)
                
                logger.info(f"–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {processing_time:.2f}—Å. –ö–∞—á–µ—Å—Ç–≤–æ: {quality_check['score']}/10")
                
                return {
                    "success": True,
                    "summary": summary,
                    "processing_time": processing_time,
                    "quality_score": quality_check['score'],
                    "quality_issues": quality_check['issues'],
                    "tokens_used": response.usage.input_tokens + response.usage.output_tokens,
                    "fallback_used": False
                }
            else:
                raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Claude API")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}): {e}")
            
            # 4.3. Retry –º–µ—Ö–∞–Ω–∏–∑–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if retry_count < 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
                await asyncio.sleep(2 ** retry_count)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                return await self.summarize_message(message_text, channel_name, retry_count + 1)
            
            # 4.4. Fallback –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            fallback_summary = self._create_fallback_summary(message_text)
            
            return {
                "success": False,
                "error": str(e),
                "summary": fallback_summary,
                "fallback_used": True,
                "retry_count": retry_count
            }
    
    def _validate_summary_quality(self, summary: str, original_text: str) -> Dict[str, Any]:
        """4.4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        issues = []
        score = 10  # –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∞–∫—Å–∏–º—É–º–∞
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å–∞–º–º–∞—Ä–∏)
        if len(summary) > 150:
            issues.append("–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞")
            score -= 2
        
        if len(summary) < 50:
            issues.append("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏")
            score -= 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        if not summary.strip():
            issues.append("–ü—É—Å—Ç–æ–µ —Å–∞–º–º–∞—Ä–∏")
            score -= 5
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã
        generic_phrases = ["–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å", "–≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ", "—Å—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å"]
        if any(phrase in summary.lower() for phrase in generic_phrases):
            issues.append("–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã")
            score -= 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
        cyrillic_count = sum(1 for char in summary if '–∞' <= char.lower() <= '—è')
        if cyrillic_count < len(summary) * 0.5:
            issues.append("–ú–∞–ª–æ —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤")
            score -= 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö EdTech —Ç–µ—Ä–º–∏–Ω–æ–≤ (–±–æ–Ω—É—Å)
        edtech_terms = ['—Å—Ç–∞—Ä—Ç–∞–ø', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', '–∫—É—Ä—Å', '–æ–±—É—á–µ–Ω–∏–µ', 
                       '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ò–ò', 'AI', 'VR', 'AR']
        if any(term.lower() in summary.lower() for term in edtech_terms):
            score = min(10, score + 1)  # –ë–æ–Ω—É—Å –∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
        
        return {
            "score": max(0, score),
            "issues": issues
        }
    
    def _filter_meta_commentary(self, summary: str) -> str:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–∞-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ Claude –æ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∞–º–º–∞—Ä–∏"""
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = summary.split('\n')
        
        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –º–µ—Ç–∞-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        meta_patterns = [
            '—ç—Ç–æ —Å–∞–º–º–∞—Ä–∏',
            '—Å–∞–º–º–∞—Ä–∏:',  
            '–∫–æ—Ä–æ—Ç–∫–æ–µ –∏ —è—Å–Ω–æ–µ',
            '—Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—É—é',
            '–ø–µ—Ä–µ–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –º—ã—Å–ª—å',
            '–Ω–∞–ø–∏—Å–∞–Ω–æ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º',
            '–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å',
            '—É–º–µ—â–∞–µ—Ç—Å—è –≤ –ª–∏–º–∏—Ç',
            'smart ranking',
            '–∫—Ä–∏—Ç–µ—Ä–∏–∏:',
            '–æ—Ü–µ–Ω–∫–∞:',
            '–∫–∞—á–µ—Å—Ç–≤–æ:',
            '- ',  # –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
            '‚Ä¢ ',  # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
            '–ø—Ä–∏–º–µ—Ä—ã:',
            '–ø–æ—è—Å–Ω–µ–Ω–∏–µ:',
            '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:'
        ]
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –º–µ—Ç–∞-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        clean_lines = []
        for line in lines:
            line_clean = line.strip().lower()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not line_clean:
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –º–µ—Ç–∞-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
            is_meta = any(pattern in line_clean for pattern in meta_patterns)
            if is_meta:
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ (–º–µ–Ω—å—à–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)
            # –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
            if len(line.strip()) < 20 and len(lines) > 1:
                continue
                
            clean_lines.append(line.strip())
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        if not clean_lines and lines:
            clean_lines = [lines[0].strip()]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏
        result = ' '.join(clean_lines)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        result = result.replace('‚Äî', '-')  # –ó–∞–º–µ–Ω—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–∏—Ä–µ
        result = ' '.join(result.split())  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        
        return result
    
    def _create_fallback_summary(self, message_text: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å–∞–º–º–∞—Ä–∏ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Claude"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
        text = message_text.strip()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        sentences = text.split('.')
        if sentences and len(sentences[0]) <= 120:
            return sentences[0].strip() + "."
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
        return (text[:100] + "...") if len(text) > 100 else text
    
    async def summarize_batch(self, messages: List[Dict], max_concurrent: int = 3) -> List[Dict]:
        """–ë–∞—Ç—á–µ–≤–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –Ω–∞–≥—Ä—É–∑–∫–∏"""
        if not messages:
            return []
        
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –±–∞—Ç—á–µ–≤—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        semaphore = asyncio.Semaphore(max_concurrent)
        
        async def summarize_one(message_data):
            async with semaphore:
                result = await self.summarize_message(
                    message_data['text'],
                    message_data.get('channel', '')
                )
                
                return {
                    **message_data,
                    'summary': result['summary'],
                    'summary_success': result['success'],
                    'summary_quality': result.get('quality_score', 0),
                    'processing_time': result.get('processing_time', 0),
                    'fallback_used': result.get('fallback_used', False)
                }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [summarize_one(msg) for msg in messages]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_summaries = []
        failed_summaries = []
        
        for result in results:
            if isinstance(result, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –≤ batch —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {result}")
                failed_summaries.append(result)
            else:
                successful_summaries.append(result)
        
        success_rate = len(successful_summaries) / len(messages) * 100
        avg_quality = sum(r.get('summary_quality', 0) for r in successful_summaries) / len(successful_summaries) if successful_summaries else 0
        
        logger.info(f"–ë–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω–æ: {len(successful_summaries)}/{len(messages)} ({success_rate:.1f}%). –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {avg_quality:.1f}/10")
        
        return successful_summaries
    
    async def test_api_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Claude API"""
        try:
            if not self.initialized:
                await self.initialize()
            
            if not self.initialized:
                return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å API"}
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            test_text = "–ö–æ–º–ø–∞–Ω–∏—è OpenAI –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å GPT-4 Turbo —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑–∞–ª–∞ –Ω–∞ 40% –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∑–∞–¥–∞—á–∞—Ö –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."
            
            result = await self.summarize_message(test_text, "@test_channel")
            
            if result['success']:
                return {
                    "status": "success", 
                    "test_summary": result['summary'],
                    "quality_score": result.get('quality_score', 0),
                    "processing_time": result.get('processing_time', 0),
                    "model": self.model,
                    "max_tokens": self.max_tokens
                }
            else:
                return {
                    "status": "error", 
                    "message": result['error'],
                    "fallback_used": result.get('fallback_used', False)
                }
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Claude API: {e}")
            return {"status": "error", "message": str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä–∞
_summarizer_instance = None

async def get_claude_summarizer() -> ClaudeSummarizer:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä–∞"""
    global _summarizer_instance
    if _summarizer_instance is None:
        _summarizer_instance = ClaudeSummarizer()
        await _summarizer_instance.initialize()
    return _summarizer_instance