#!/usr/bin/env python3
"""
–†–µ–∞–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ Telegram –∫–∞–Ω–∞–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Telethon
"""

import asyncio
import logging
from typing import List, Dict, Optional
from datetime import datetime, timedelta
from telethon import TelegramClient
from telethon.tl.types import Message, MessageMediaPhoto, MessageMediaDocument

try:
    from .config import TELEGRAM_API_ID, TELEGRAM_API_HASH
except ImportError:
    from config import TELEGRAM_API_ID, TELEGRAM_API_HASH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import os
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    level=logging.DEBUG,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/telegram_reader.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)
logger.info("üöÄ Telegram Reader Module - REAL DATA ONLY MODE")

class TelegramChannelReader:
    """–ö–ª–∞—Å—Å –¥–ª—è —á—Ç–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.client = None
        self.initialized = False
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            logger.info("üîß Initializing Telegram client...")
            logger.debug(f"üîç Environment check:")
            logger.debug(f"   TELEGRAM_API_ID: {'‚úÖ Set' if TELEGRAM_API_ID else '‚ùå Missing'}")
            logger.debug(f"   TELEGRAM_API_HASH: {'‚úÖ Set' if TELEGRAM_API_HASH else '‚ùå Missing'}")
            
            if not TELEGRAM_API_ID or not TELEGRAM_API_HASH:
                logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_API_ID –∏–ª–∏ TELEGRAM_API_HASH")
                logger.error("üí° –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Railway Environment Variables:")
                logger.error("   TELEGRAM_API_ID=your_api_id")
                logger.error("   TELEGRAM_API_HASH=your_api_hash")
                logger.error("üîó –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞ https://my.telegram.org/auth")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            logger.info("üîó Creating Telethon client...")
            self.client = TelegramClient(
                'edu_digest_bot', 
                int(TELEGRAM_API_ID), 
                TELEGRAM_API_HASH
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            logger.info("üîó Starting Telethon client connection...")
            await self.client.start()
            logger.info("‚úÖ Telethon client connection established")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            logger.info("üë§ Checking authorization...")
            me = await self.client.get_me()
            if me:
                logger.info(f"‚úÖ Telethon client authorized successfully")
                logger.info(f"üë§ User: {me.first_name} {me.last_name or ''} (@{me.username or 'no_username'})")
                logger.info(f"üÜî User ID: {me.id}")
                self.initialized = True
                return True
            else:
                logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Telegram")
                logger.error("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                logger.error("   - –ù–µ–≤–µ—Ä–Ω—ã–µ TELEGRAM_API_ID –∏–ª–∏ TELEGRAM_API_HASH")
                logger.error("   - –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
                logger.error("   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram API")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telethon: {e}")
            logger.error(f"üîç Exception type: {type(e).__name__}")
            import traceback
            logger.error(f"üìã Full traceback: {traceback.format_exc()}")
            if "api_id" in str(e) or "api_hash" in str(e):
                logger.error("üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å API credentials - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_API_ID –∏ TELEGRAM_API_HASH")
            elif "network" in str(e).lower() or "connection" in str(e).lower():
                logger.error("üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram API")
            return False
    
    async def get_channel_messages(self, channel_username: str, limit: int = 10, hours_lookback: int = 12) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            if not self.initialized:
                logger.error("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
            
            # –û—á–∏—â–∞–µ–º username –æ—Ç —Å–∏–º–≤–æ–ª–∞ @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            clean_username = channel_username.lstrip('@')
            logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞: {channel_username} -> {clean_username}")
            
            # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
            try:
                entity = await self.client.get_entity(clean_username)
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {entity.title if hasattr(entity, 'title') else clean_username}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª {channel_username}: {e} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return []
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç—Å–µ—á–∫–∏ —Å UTC timezone
            from datetime import timezone
            time_limit = datetime.now(timezone.utc) - timedelta(hours=hours_lookback)
            
            messages = []
            async for message in self.client.iter_messages(entity, limit=limit):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
                if message.date < time_limit:
                    break
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if not message.text or len(message.text.strip()) < 50:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
                media_type = None
                if hasattr(message, 'media') and message.media:
                    if isinstance(message.media, MessageMediaPhoto):
                        media_type = 'photo'
                    elif isinstance(message.media, MessageMediaDocument):
                        media_type = 'document'
                    else:
                        media_type = 'other'
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                link = f"https://t.me/{channel_username.replace('@', '')}/{message.id}"
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                msg_data = {
                    'id': message.id,
                    'date': message.date,
                    'text': message.text,
                    'channel': channel_username,
                    'link': link,
                    'media_type': media_type,
                    'views': getattr(message, 'views', 0),
                    'forwards': getattr(message, 'forwards', 0),
                    'is_reply': message.is_reply,
                    'sender_id': getattr(message, 'sender_id', None),
                    'reactions_count': 0,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∞–∫—Ü–∏–π
                    'external_links': self._extract_links(message.text) if message.text else []
                }
                
                messages.append(msg_data)
            
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {channel_username}")
            return messages
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {channel_username}: {e} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª")
            return []
    
    def _extract_links(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        import re
        url_pattern = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')
        return url_pattern.findall(text)
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.client:
            await self.client.disconnect()
            logger.info("üîå Telethon –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
_reader_instance = None

async def get_telegram_reader() -> TelegramChannelReader:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —á–∏—Ç–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª–æ–≤"""
    global _reader_instance
    
    # Always create a fresh instance to avoid event loop conflicts
    if _reader_instance is not None:
        logger.info("üîÑ Closing existing Telegram reader to prevent event loop conflicts...")
        try:
            await _reader_instance.close()
        except:
            pass
        _reader_instance = None
    
    logger.info("üîß Creating new Telegram reader instance...")
    _reader_instance = TelegramChannelReader()
    try:
        logger.info("üîó Initializing Telegram reader...")
        init_result = await _reader_instance.initialize()
        logger.info(f"üìä Initialization result: {init_result}")
        if not init_result:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram reader")
            _reader_instance = None
            return None
    except Exception as e:
        logger.error(f"‚ùå Exception during Telegram reader initialization: {e}")
        logger.error(f"‚ùå Exception type: {type(e).__name__}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        _reader_instance = None
        return None
    
    return _reader_instance

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_channel_reading():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
    reader = await get_telegram_reader()
    if not reader:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å reader")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–¥–∞
    try:
        from .database import ChannelsDB
        channels = ChannelsDB().get_active_channels()
        test_channels = [ch.get('username', '') for ch in channels[:3]]  # –ü–µ—Ä–≤—ã–µ 3 –∫–∞–Ω–∞–ª–∞
        if not test_channels:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ë–î: {e}")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞...")
        test_channels = ['@habr_career']  # –ò–∑–≤–µ—Å—Ç–Ω—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª
    
    for channel in test_channels:
        if not channel:
            continue
        print(f"\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª {channel}...")
        messages = await reader.get_channel_messages(channel, limit=3, hours_lookback=24)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π:")
        for i, msg in enumerate(messages, 1):
            print(f"  {i}. {msg['text'][:100]}...")
            print(f"     üïí {msg['date']} | üëÄ {msg['views']} | üîó {msg['link']}")
    
    await reader.close()

if __name__ == "__main__":
    asyncio.run(test_channel_reading())