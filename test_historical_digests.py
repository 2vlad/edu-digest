#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ (–±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)
"""

import asyncio
import logging
import sys
from datetime import datetime, timezone, timedelta, time, date

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
sys.path.append('/Users/tovlad01/Dev/edu-digest')
from generate_historical_digests import HistoricalDigestGenerator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/test_historical_digests.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

async def test_single_digest():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞...")
    
    generator = HistoricalDigestGenerator()
    
    try:
        await generator.initialize()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 24 –∏—é–ª—è, —É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç
        test_date = date(2025, 7, 24)
        
        result = await generator.create_historical_digest(
            target_date=test_date,
            digest_type="–£—Ç—Ä–µ–Ω–Ω–∏–π",
            start_hour=6,
            end_hour=12,
            publish=False  # –ù–ï –ø—É–±–ª–∏–∫—É–µ–º, —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º
        )
        
        if result["success"]:
            logger.info("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {result['messages_count']}")
            logger.info("üì∞ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç:")
            logger.info("=" * 60)
            print(result["digest_text"])
            logger.info("=" * 60)
        else:
            logger.error(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {result['reason']}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        logger.error(f"üìã Traceback: {traceback.format_exc()}")

if __name__ == "__main__":
    try:
        asyncio.run(test_single_digest())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")